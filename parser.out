Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Pgm
Rule 1     Pgm -> Declstar
Rule 2     Declstar -> empty
Rule 3     Declstar -> Decl Declstar
Rule 4     empty -> <empty>
Rule 5     Decl -> VarDecl
Rule 6     Decl -> FunDecl
Rule 7     Decl -> ClassDecl
Rule 8     VarDecl -> Type VarList SEMICOLON
Rule 9     FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt
Rule 10    ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY
Rule 11    class_name -> animal
Rule 12    class_name -> dog
Rule 13    ExtendsQ -> empty
Rule 14    ExtendsQ -> Extends
Rule 15    Extends -> EXTENDS class_name
Rule 16    MemberDeclstar -> empty
Rule 17    MemberDeclstar -> MemberDecl MemberDeclstar
Rule 18    MemberDecl -> VarDecl
Rule 19    MemberDecl -> FunDecl
Rule 20    FormalsQ -> empty
Rule 21    FormalsQ -> Formals
Rule 22    VarDeclstar -> empty
Rule 23    VarDeclstar -> VarDecl VarDeclstar
Rule 24    Type -> INT
Rule 25    Type -> BOOL
Rule 26    Type -> VOID
Rule 27    Type -> Type LSQR RSQR
Rule 28    Type -> animal
Rule 29    Type -> dog
Rule 30    VarList -> Var COMMA VarList
Rule 31    VarList -> Var
Rule 32    Var -> IDENTIFIER Dimstar
Rule 33    Formals -> Type Var COMMA Formals
Rule 34    Formals -> Type Var
Rule 35    Stmtstar -> empty
Rule 36    Stmtstar -> Stmt Stmtstar
Rule 37    Stmt -> SE SEMICOLON
Rule 38    Stmt -> Print
Rule 39    Stmt -> Block
Rule 40    Stmt -> If
Rule 41    Stmt -> While
Rule 42    Stmt -> for
Rule 43    Stmt -> Do_while
Rule 44    Stmt -> Return
Rule 45    SE -> Assign
Rule 46    SE -> MethodCall
Rule 47    Assign -> Lhs EQUALS AE
Rule 48    Assign -> Lhs Inc
Rule 49    Assign -> Lhs Dec
Rule 50    Assign -> Inc Lhs
Rule 51    Assign -> Dec Lhs
Rule 52    Dec -> DEC
Rule 53    Inc -> INC
Rule 54    Print -> PRINT LPAREN AE RPAREN SEMICOLON
Rule 55    Block -> LCURLY VarDeclstar Stmtstar RCURLY
Rule 56    If -> IF AE THEN Stmt
Rule 57    If -> IF AE THEN Stmt ELSE Stmt
Rule 58    While -> WHILE AE DO Stmt
Rule 59    Do_while -> DO Stmt WHILE AE SEMICOLON
Rule 60    for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
Rule 61    SEQ -> empty
Rule 62    SEQ -> SE
Rule 63    AEQ -> empty
Rule 64    AEQ -> AE
Rule 65    Return -> RETURN AEQ SEMICOLON
Rule 66    Lhs -> FieldAccess
Rule 67    Lhs -> ArrayAccess
Rule 68    AE -> AE TIMES AE
Rule 69    AE -> AE SLASH AE
Rule 70    AE -> AE PLUS AE
Rule 71    AE -> AE MINUS AE
Rule 72    AE -> AE LT AE
Rule 73    AE -> AE EQ AE
Rule 74    AE -> AE GT AE
Rule 75    AE -> AE GTEQ AE
Rule 76    AE -> AE LTEQ AE
Rule 77    AE -> AE NEQ AE
Rule 78    AE -> AE LAND AE
Rule 79    AE -> AE LOR AE
Rule 80    AE -> AE MOD AE
Rule 81    AE -> MINUS AE
Rule 82    AE -> NOT AE
Rule 83    AE -> Primary
Rule 84    AE -> SE
Rule 85    AE -> NewArray
Rule 86    Primary -> intconst
Rule 87    Primary -> true
Rule 88    Primary -> false
Rule 89    Primary -> this
Rule 90    Primary -> super
Rule 91    Primary -> Input
Rule 92    Primary -> LPAREN AE RPAREN
Rule 93    Primary -> FieldAccess
Rule 94    Primary -> ArrayAccess
Rule 95    Primary -> NewObject
Rule 96    intconst -> NUMBER
Rule 97    true -> TRUE
Rule 98    false -> FALSE
Rule 99    this -> THIS
Rule 100   super -> SUPER
Rule 101   Input -> INPUT LPAREN RPAREN
Rule 102   ArrayAccess -> Primary LSQR AE RSQR
Rule 103   FieldAccess -> Primary DOT IDENTIFIER
Rule 104   FieldAccess -> IDENTIFIER
Rule 105   MethodCall -> FieldAccess LPAREN ArgsQ RPAREN
Rule 106   ArgsQ -> empty
Rule 107   ArgsQ -> Args
Rule 108   Args -> AE COMMA Args
Rule 109   Args -> AE
Rule 110   NewObject -> NEW animal LPAREN RPAREN
Rule 111   NewObject -> NEW dog LPAREN RPAREN
Rule 112   NewArray -> NEW Type DimExpr Dimstar
Rule 113   DimExpr -> LSQR AE RSQR
Rule 114   Dimstar -> empty
Rule 115   Dimstar -> Dim Dimstar
Rule 116   Dim -> LSQR RSQR

Terminals, with rules where they appear

BOOL                 : 25
CLASS                : 10
COMMA                : 30 33 108
DEC                  : 52
DO                   : 58 59
DOT                  : 103
ELSE                 : 57
EQ                   : 73
EQUALS               : 47
EXTENDS              : 15
FALSE                : 98
FOR                  : 60
GT                   : 74
GTEQ                 : 75
IDENTIFIER           : 32 103 104
IF                   : 56 57
INC                  : 53
INPUT                : 101
INT                  : 24
LAND                 : 78
LCURLY               : 10 55
LOR                  : 79
LPAREN               : 9 54 60 92 101 105 110 111
LSQR                 : 27 102 113 116
LT                   : 72
LTEQ                 : 76
MINUS                : 71 81
MOD                  : 80
NEQ                  : 77
NEW                  : 110 111 112
NOT                  : 82
NUMBER               : 96
PLUS                 : 70
PRINT                : 54
RCURLY               : 10 55
RETURN               : 65
RPAREN               : 9 54 60 92 101 105 110 111
RSQR                 : 27 102 113 116
SEMICOLON            : 8 37 54 59 60 60 65
SLASH                : 69
SUPER                : 100
THEN                 : 56 57
THIS                 : 99
TIMES                : 68
TRUE                 : 97
VOID                 : 26
WHILE                : 58 59
animal               : 11 28 110
dog                  : 12 29 111
error                : 

Nonterminals, with rules where they appear

AE                   : 47 54 56 57 58 59 64 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 82 92 102 108 109 113
AEQ                  : 60 65
Args                 : 107 108
ArgsQ                : 105
ArrayAccess          : 67 94
Assign               : 45
Block                : 39
ClassDecl            : 7
Dec                  : 49 51
Decl                 : 3
Declstar             : 1 3
Dim                  : 115
DimExpr              : 112
Dimstar              : 32 112 115
Do_while             : 43
Extends              : 14
ExtendsQ             : 10
FieldAccess          : 66 93 105
Formals              : 21 33
FormalsQ             : 9
FunDecl              : 6 19
If                   : 40
Inc                  : 48 50
Input                : 91
Lhs                  : 47 48 49 50 51
MemberDecl           : 17
MemberDeclstar       : 10 17
MethodCall           : 46
NewArray             : 85
NewObject            : 95
Pgm                  : 0
Primary              : 83 102 103
Print                : 38
Return               : 44
SE                   : 37 62 84
SEQ                  : 60 60
Stmt                 : 9 36 56 57 57 58 59 60
Stmtstar             : 36 55
Type                 : 8 9 27 33 34 112
Var                  : 9 30 31 33 34
VarDecl              : 5 18 23
VarDeclstar          : 23 55
VarList              : 8 30
While                : 41
class_name           : 10 15
empty                : 2 13 16 20 22 35 61 63 106 114
false                : 88
for                  : 42
intconst             : 86
super                : 90
this                 : 89
true                 : 87

Parsing method: LALR

state 0

    (0) S' -> . Pgm
    (1) Pgm -> . Declstar
    (2) Declstar -> . empty
    (3) Declstar -> . Decl Declstar
    (4) empty -> .
    (5) Decl -> . VarDecl
    (6) Decl -> . FunDecl
    (7) Decl -> . ClassDecl
    (8) VarDecl -> . Type VarList SEMICOLON
    (9) FunDecl -> . Type Var LPAREN FormalsQ RPAREN Stmt
    (10) ClassDecl -> . CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    $end            reduce using rule 4 (empty -> .)
    CLASS           shift and go to state 7
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    Decl                           shift and go to state 9
    ClassDecl                      shift and go to state 3
    FunDecl                        shift and go to state 4
    Pgm                            shift and go to state 10
    VarDecl                        shift and go to state 11
    Declstar                       shift and go to state 14
    Type                           shift and go to state 2
    empty                          shift and go to state 8

state 1

    (26) Type -> VOID .

    LSQR            reduce using rule 26 (Type -> VOID .)
    IDENTIFIER      reduce using rule 26 (Type -> VOID .)


state 2

    (8) VarDecl -> Type . VarList SEMICOLON
    (9) FunDecl -> Type . Var LPAREN FormalsQ RPAREN Stmt
    (27) Type -> Type . LSQR RSQR
    (30) VarList -> . Var COMMA VarList
    (31) VarList -> . Var
    (32) Var -> . IDENTIFIER Dimstar

    LSQR            shift and go to state 16
    IDENTIFIER      shift and go to state 18

    VarList                        shift and go to state 15
    Var                            shift and go to state 17

state 3

    (7) Decl -> ClassDecl .

    CLASS           reduce using rule 7 (Decl -> ClassDecl .)
    INT             reduce using rule 7 (Decl -> ClassDecl .)
    BOOL            reduce using rule 7 (Decl -> ClassDecl .)
    VOID            reduce using rule 7 (Decl -> ClassDecl .)
    animal          reduce using rule 7 (Decl -> ClassDecl .)
    dog             reduce using rule 7 (Decl -> ClassDecl .)
    $end            reduce using rule 7 (Decl -> ClassDecl .)


state 4

    (6) Decl -> FunDecl .

    CLASS           reduce using rule 6 (Decl -> FunDecl .)
    INT             reduce using rule 6 (Decl -> FunDecl .)
    BOOL            reduce using rule 6 (Decl -> FunDecl .)
    VOID            reduce using rule 6 (Decl -> FunDecl .)
    animal          reduce using rule 6 (Decl -> FunDecl .)
    dog             reduce using rule 6 (Decl -> FunDecl .)
    $end            reduce using rule 6 (Decl -> FunDecl .)


state 5

    (28) Type -> animal .

    LSQR            reduce using rule 28 (Type -> animal .)
    IDENTIFIER      reduce using rule 28 (Type -> animal .)


state 6

    (25) Type -> BOOL .

    LSQR            reduce using rule 25 (Type -> BOOL .)
    IDENTIFIER      reduce using rule 25 (Type -> BOOL .)


state 7

    (10) ClassDecl -> CLASS . class_name ExtendsQ LCURLY MemberDeclstar RCURLY
    (11) class_name -> . animal
    (12) class_name -> . dog

    animal          shift and go to state 21
    dog             shift and go to state 20

    class_name                     shift and go to state 19

state 8

    (2) Declstar -> empty .

    $end            reduce using rule 2 (Declstar -> empty .)


state 9

    (3) Declstar -> Decl . Declstar
    (2) Declstar -> . empty
    (3) Declstar -> . Decl Declstar
    (4) empty -> .
    (5) Decl -> . VarDecl
    (6) Decl -> . FunDecl
    (7) Decl -> . ClassDecl
    (8) VarDecl -> . Type VarList SEMICOLON
    (9) FunDecl -> . Type Var LPAREN FormalsQ RPAREN Stmt
    (10) ClassDecl -> . CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    $end            reduce using rule 4 (empty -> .)
    CLASS           shift and go to state 7
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    Decl                           shift and go to state 9
    ClassDecl                      shift and go to state 3
    FunDecl                        shift and go to state 4
    VarDecl                        shift and go to state 11
    Declstar                       shift and go to state 22
    Type                           shift and go to state 2
    empty                          shift and go to state 8

state 10

    (0) S' -> Pgm .



state 11

    (5) Decl -> VarDecl .

    CLASS           reduce using rule 5 (Decl -> VarDecl .)
    INT             reduce using rule 5 (Decl -> VarDecl .)
    BOOL            reduce using rule 5 (Decl -> VarDecl .)
    VOID            reduce using rule 5 (Decl -> VarDecl .)
    animal          reduce using rule 5 (Decl -> VarDecl .)
    dog             reduce using rule 5 (Decl -> VarDecl .)
    $end            reduce using rule 5 (Decl -> VarDecl .)


state 12

    (29) Type -> dog .

    LSQR            reduce using rule 29 (Type -> dog .)
    IDENTIFIER      reduce using rule 29 (Type -> dog .)


state 13

    (24) Type -> INT .

    LSQR            reduce using rule 24 (Type -> INT .)
    IDENTIFIER      reduce using rule 24 (Type -> INT .)


state 14

    (1) Pgm -> Declstar .

    $end            reduce using rule 1 (Pgm -> Declstar .)


state 15

    (8) VarDecl -> Type VarList . SEMICOLON

    SEMICOLON       shift and go to state 23


state 16

    (27) Type -> Type LSQR . RSQR

    RSQR            shift and go to state 24


state 17

    (9) FunDecl -> Type Var . LPAREN FormalsQ RPAREN Stmt
    (30) VarList -> Var . COMMA VarList
    (31) VarList -> Var .

    LPAREN          shift and go to state 26
    COMMA           shift and go to state 25
    SEMICOLON       reduce using rule 31 (VarList -> Var .)


state 18

    (32) Var -> IDENTIFIER . Dimstar
    (114) Dimstar -> . empty
    (115) Dimstar -> . Dim Dimstar
    (4) empty -> .
    (116) Dim -> . LSQR RSQR

    LPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    LSQR            shift and go to state 28

    Dim                            shift and go to state 27
    Dimstar                        shift and go to state 29
    empty                          shift and go to state 30

state 19

    (10) ClassDecl -> CLASS class_name . ExtendsQ LCURLY MemberDeclstar RCURLY
    (13) ExtendsQ -> . empty
    (14) ExtendsQ -> . Extends
    (4) empty -> .
    (15) Extends -> . EXTENDS class_name

    LCURLY          reduce using rule 4 (empty -> .)
    EXTENDS         shift and go to state 33

    ExtendsQ                       shift and go to state 31
    Extends                        shift and go to state 32
    empty                          shift and go to state 34

state 20

    (12) class_name -> dog .

    EXTENDS         reduce using rule 12 (class_name -> dog .)
    LCURLY          reduce using rule 12 (class_name -> dog .)


state 21

    (11) class_name -> animal .

    EXTENDS         reduce using rule 11 (class_name -> animal .)
    LCURLY          reduce using rule 11 (class_name -> animal .)


state 22

    (3) Declstar -> Decl Declstar .

    $end            reduce using rule 3 (Declstar -> Decl Declstar .)


state 23

    (8) VarDecl -> Type VarList SEMICOLON .

    INT             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    BOOL            reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    VOID            reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    animal          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    dog             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    PRINT           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    LCURLY          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    IF              reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    WHILE           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    FOR             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    DO              reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    RETURN          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    INC             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    DEC             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    IDENTIFIER      reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    LPAREN          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    NUMBER          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    TRUE            reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    FALSE           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    THIS            reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    SUPER           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    INPUT           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    NEW             reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    RCURLY          reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    CLASS           reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)
    $end            reduce using rule 8 (VarDecl -> Type VarList SEMICOLON .)


state 24

    (27) Type -> Type LSQR RSQR .

    LSQR            reduce using rule 27 (Type -> Type LSQR RSQR .)
    IDENTIFIER      reduce using rule 27 (Type -> Type LSQR RSQR .)


state 25

    (30) VarList -> Var COMMA . VarList
    (30) VarList -> . Var COMMA VarList
    (31) VarList -> . Var
    (32) Var -> . IDENTIFIER Dimstar

    IDENTIFIER      shift and go to state 18

    Var                            shift and go to state 35
    VarList                        shift and go to state 36

state 26

    (9) FunDecl -> Type Var LPAREN . FormalsQ RPAREN Stmt
    (20) FormalsQ -> . empty
    (21) FormalsQ -> . Formals
    (4) empty -> .
    (33) Formals -> . Type Var COMMA Formals
    (34) Formals -> . Type Var
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    RPAREN          reduce using rule 4 (empty -> .)
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    FormalsQ                       shift and go to state 37
    Type                           shift and go to state 38
    empty                          shift and go to state 39
    Formals                        shift and go to state 40

state 27

    (115) Dimstar -> Dim . Dimstar
    (114) Dimstar -> . empty
    (115) Dimstar -> . Dim Dimstar
    (4) empty -> .
    (116) Dim -> . LSQR RSQR

    LPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    TIMES           reduce using rule 4 (empty -> .)
    SLASH           reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    LT              reduce using rule 4 (empty -> .)
    EQ              reduce using rule 4 (empty -> .)
    GT              reduce using rule 4 (empty -> .)
    GTEQ            reduce using rule 4 (empty -> .)
    LTEQ            reduce using rule 4 (empty -> .)
    NEQ             reduce using rule 4 (empty -> .)
    LAND            reduce using rule 4 (empty -> .)
    LOR             reduce using rule 4 (empty -> .)
    MOD             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    THEN            reduce using rule 4 (empty -> .)
    RSQR            reduce using rule 4 (empty -> .)
    LSQR            shift and go to state 28

    Dim                            shift and go to state 27
    Dimstar                        shift and go to state 41
    empty                          shift and go to state 30

state 28

    (116) Dim -> LSQR . RSQR

    RSQR            shift and go to state 42


state 29

    (32) Var -> IDENTIFIER Dimstar .

    COMMA           reduce using rule 32 (Var -> IDENTIFIER Dimstar .)
    SEMICOLON       reduce using rule 32 (Var -> IDENTIFIER Dimstar .)
    RPAREN          reduce using rule 32 (Var -> IDENTIFIER Dimstar .)
    LPAREN          reduce using rule 32 (Var -> IDENTIFIER Dimstar .)


state 30

    (114) Dimstar -> empty .

    LPAREN          reduce using rule 114 (Dimstar -> empty .)
    COMMA           reduce using rule 114 (Dimstar -> empty .)
    SEMICOLON       reduce using rule 114 (Dimstar -> empty .)
    RPAREN          reduce using rule 114 (Dimstar -> empty .)
    TIMES           reduce using rule 114 (Dimstar -> empty .)
    SLASH           reduce using rule 114 (Dimstar -> empty .)
    PLUS            reduce using rule 114 (Dimstar -> empty .)
    MINUS           reduce using rule 114 (Dimstar -> empty .)
    LT              reduce using rule 114 (Dimstar -> empty .)
    EQ              reduce using rule 114 (Dimstar -> empty .)
    GT              reduce using rule 114 (Dimstar -> empty .)
    GTEQ            reduce using rule 114 (Dimstar -> empty .)
    LTEQ            reduce using rule 114 (Dimstar -> empty .)
    NEQ             reduce using rule 114 (Dimstar -> empty .)
    LAND            reduce using rule 114 (Dimstar -> empty .)
    LOR             reduce using rule 114 (Dimstar -> empty .)
    MOD             reduce using rule 114 (Dimstar -> empty .)
    DO              reduce using rule 114 (Dimstar -> empty .)
    THEN            reduce using rule 114 (Dimstar -> empty .)
    RSQR            reduce using rule 114 (Dimstar -> empty .)


state 31

    (10) ClassDecl -> CLASS class_name ExtendsQ . LCURLY MemberDeclstar RCURLY

    LCURLY          shift and go to state 43


state 32

    (14) ExtendsQ -> Extends .

    LCURLY          reduce using rule 14 (ExtendsQ -> Extends .)


state 33

    (15) Extends -> EXTENDS . class_name
    (11) class_name -> . animal
    (12) class_name -> . dog

    animal          shift and go to state 21
    dog             shift and go to state 20

    class_name                     shift and go to state 44

state 34

    (13) ExtendsQ -> empty .

    LCURLY          reduce using rule 13 (ExtendsQ -> empty .)


state 35

    (30) VarList -> Var . COMMA VarList
    (31) VarList -> Var .

    COMMA           shift and go to state 25
    SEMICOLON       reduce using rule 31 (VarList -> Var .)


state 36

    (30) VarList -> Var COMMA VarList .

    SEMICOLON       reduce using rule 30 (VarList -> Var COMMA VarList .)


state 37

    (9) FunDecl -> Type Var LPAREN FormalsQ . RPAREN Stmt

    RPAREN          shift and go to state 45


state 38

    (33) Formals -> Type . Var COMMA Formals
    (34) Formals -> Type . Var
    (27) Type -> Type . LSQR RSQR
    (32) Var -> . IDENTIFIER Dimstar

    LSQR            shift and go to state 16
    IDENTIFIER      shift and go to state 18

    Var                            shift and go to state 46

state 39

    (20) FormalsQ -> empty .

    RPAREN          reduce using rule 20 (FormalsQ -> empty .)


state 40

    (21) FormalsQ -> Formals .

    RPAREN          reduce using rule 21 (FormalsQ -> Formals .)


state 41

    (115) Dimstar -> Dim Dimstar .

    LPAREN          reduce using rule 115 (Dimstar -> Dim Dimstar .)
    COMMA           reduce using rule 115 (Dimstar -> Dim Dimstar .)
    SEMICOLON       reduce using rule 115 (Dimstar -> Dim Dimstar .)
    RPAREN          reduce using rule 115 (Dimstar -> Dim Dimstar .)
    TIMES           reduce using rule 115 (Dimstar -> Dim Dimstar .)
    SLASH           reduce using rule 115 (Dimstar -> Dim Dimstar .)
    PLUS            reduce using rule 115 (Dimstar -> Dim Dimstar .)
    MINUS           reduce using rule 115 (Dimstar -> Dim Dimstar .)
    LT              reduce using rule 115 (Dimstar -> Dim Dimstar .)
    EQ              reduce using rule 115 (Dimstar -> Dim Dimstar .)
    GT              reduce using rule 115 (Dimstar -> Dim Dimstar .)
    GTEQ            reduce using rule 115 (Dimstar -> Dim Dimstar .)
    LTEQ            reduce using rule 115 (Dimstar -> Dim Dimstar .)
    NEQ             reduce using rule 115 (Dimstar -> Dim Dimstar .)
    LAND            reduce using rule 115 (Dimstar -> Dim Dimstar .)
    LOR             reduce using rule 115 (Dimstar -> Dim Dimstar .)
    MOD             reduce using rule 115 (Dimstar -> Dim Dimstar .)
    DO              reduce using rule 115 (Dimstar -> Dim Dimstar .)
    THEN            reduce using rule 115 (Dimstar -> Dim Dimstar .)
    RSQR            reduce using rule 115 (Dimstar -> Dim Dimstar .)


state 42

    (116) Dim -> LSQR RSQR .

    LSQR            reduce using rule 116 (Dim -> LSQR RSQR .)
    LPAREN          reduce using rule 116 (Dim -> LSQR RSQR .)
    COMMA           reduce using rule 116 (Dim -> LSQR RSQR .)
    SEMICOLON       reduce using rule 116 (Dim -> LSQR RSQR .)
    RPAREN          reduce using rule 116 (Dim -> LSQR RSQR .)
    TIMES           reduce using rule 116 (Dim -> LSQR RSQR .)
    SLASH           reduce using rule 116 (Dim -> LSQR RSQR .)
    PLUS            reduce using rule 116 (Dim -> LSQR RSQR .)
    MINUS           reduce using rule 116 (Dim -> LSQR RSQR .)
    LT              reduce using rule 116 (Dim -> LSQR RSQR .)
    EQ              reduce using rule 116 (Dim -> LSQR RSQR .)
    GT              reduce using rule 116 (Dim -> LSQR RSQR .)
    GTEQ            reduce using rule 116 (Dim -> LSQR RSQR .)
    LTEQ            reduce using rule 116 (Dim -> LSQR RSQR .)
    NEQ             reduce using rule 116 (Dim -> LSQR RSQR .)
    LAND            reduce using rule 116 (Dim -> LSQR RSQR .)
    LOR             reduce using rule 116 (Dim -> LSQR RSQR .)
    MOD             reduce using rule 116 (Dim -> LSQR RSQR .)
    DO              reduce using rule 116 (Dim -> LSQR RSQR .)
    THEN            reduce using rule 116 (Dim -> LSQR RSQR .)
    RSQR            reduce using rule 116 (Dim -> LSQR RSQR .)


state 43

    (10) ClassDecl -> CLASS class_name ExtendsQ LCURLY . MemberDeclstar RCURLY
    (16) MemberDeclstar -> . empty
    (17) MemberDeclstar -> . MemberDecl MemberDeclstar
    (4) empty -> .
    (18) MemberDecl -> . VarDecl
    (19) MemberDecl -> . FunDecl
    (8) VarDecl -> . Type VarList SEMICOLON
    (9) FunDecl -> . Type Var LPAREN FormalsQ RPAREN Stmt
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    RCURLY          reduce using rule 4 (empty -> .)
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    FunDecl                        shift and go to state 47
    VarDecl                        shift and go to state 51
    MemberDecl                     shift and go to state 48
    MemberDeclstar                 shift and go to state 49
    Type                           shift and go to state 2
    empty                          shift and go to state 50

state 44

    (15) Extends -> EXTENDS class_name .

    LCURLY          reduce using rule 15 (Extends -> EXTENDS class_name .)


state 45

    (9) FunDecl -> Type Var LPAREN FormalsQ RPAREN . Stmt
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 67
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 46

    (33) Formals -> Type Var . COMMA Formals
    (34) Formals -> Type Var .

    COMMA           shift and go to state 94
    RPAREN          reduce using rule 34 (Formals -> Type Var .)


state 47

    (19) MemberDecl -> FunDecl .

    INT             reduce using rule 19 (MemberDecl -> FunDecl .)
    BOOL            reduce using rule 19 (MemberDecl -> FunDecl .)
    VOID            reduce using rule 19 (MemberDecl -> FunDecl .)
    animal          reduce using rule 19 (MemberDecl -> FunDecl .)
    dog             reduce using rule 19 (MemberDecl -> FunDecl .)
    RCURLY          reduce using rule 19 (MemberDecl -> FunDecl .)


state 48

    (17) MemberDeclstar -> MemberDecl . MemberDeclstar
    (16) MemberDeclstar -> . empty
    (17) MemberDeclstar -> . MemberDecl MemberDeclstar
    (4) empty -> .
    (18) MemberDecl -> . VarDecl
    (19) MemberDecl -> . FunDecl
    (8) VarDecl -> . Type VarList SEMICOLON
    (9) FunDecl -> . Type Var LPAREN FormalsQ RPAREN Stmt
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    RCURLY          reduce using rule 4 (empty -> .)
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    FunDecl                        shift and go to state 47
    VarDecl                        shift and go to state 51
    MemberDecl                     shift and go to state 48
    MemberDeclstar                 shift and go to state 95
    Type                           shift and go to state 2
    empty                          shift and go to state 50

state 49

    (10) ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar . RCURLY

    RCURLY          shift and go to state 96


state 50

    (16) MemberDeclstar -> empty .

    RCURLY          reduce using rule 16 (MemberDeclstar -> empty .)


state 51

    (18) MemberDecl -> VarDecl .

    INT             reduce using rule 18 (MemberDecl -> VarDecl .)
    BOOL            reduce using rule 18 (MemberDecl -> VarDecl .)
    VOID            reduce using rule 18 (MemberDecl -> VarDecl .)
    animal          reduce using rule 18 (MemberDecl -> VarDecl .)
    dog             reduce using rule 18 (MemberDecl -> VarDecl .)
    RCURLY          reduce using rule 18 (MemberDecl -> VarDecl .)


state 52

    (65) Return -> RETURN . AEQ SEMICOLON
    (63) AEQ -> . empty
    (64) AEQ -> . AE
    (4) empty -> .
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    SEMICOLON       reduce using rule 4 (empty -> .)
    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    AEQ                            shift and go to state 97
    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    NewArray                       shift and go to state 100
    empty                          shift and go to state 101
    AE                             shift and go to state 102
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    super                          shift and go to state 66
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 53

    (59) Do_while -> DO . Stmt WHILE AE SEMICOLON
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 108
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 54

    (54) Print -> PRINT . LPAREN AE RPAREN SEMICOLON

    LPAREN          shift and go to state 109


state 55

    (96) intconst -> NUMBER .

    DOT             reduce using rule 96 (intconst -> NUMBER .)
    LSQR            reduce using rule 96 (intconst -> NUMBER .)
    TIMES           reduce using rule 96 (intconst -> NUMBER .)
    SLASH           reduce using rule 96 (intconst -> NUMBER .)
    PLUS            reduce using rule 96 (intconst -> NUMBER .)
    MINUS           reduce using rule 96 (intconst -> NUMBER .)
    LT              reduce using rule 96 (intconst -> NUMBER .)
    EQ              reduce using rule 96 (intconst -> NUMBER .)
    GT              reduce using rule 96 (intconst -> NUMBER .)
    GTEQ            reduce using rule 96 (intconst -> NUMBER .)
    LTEQ            reduce using rule 96 (intconst -> NUMBER .)
    NEQ             reduce using rule 96 (intconst -> NUMBER .)
    LAND            reduce using rule 96 (intconst -> NUMBER .)
    LOR             reduce using rule 96 (intconst -> NUMBER .)
    MOD             reduce using rule 96 (intconst -> NUMBER .)
    SEMICOLON       reduce using rule 96 (intconst -> NUMBER .)
    DO              reduce using rule 96 (intconst -> NUMBER .)
    RPAREN          reduce using rule 96 (intconst -> NUMBER .)
    THEN            reduce using rule 96 (intconst -> NUMBER .)
    COMMA           reduce using rule 96 (intconst -> NUMBER .)
    RSQR            reduce using rule 96 (intconst -> NUMBER .)


state 56

    (55) Block -> LCURLY . VarDeclstar Stmtstar RCURLY
    (22) VarDeclstar -> . empty
    (23) VarDeclstar -> . VarDecl VarDeclstar
    (4) empty -> .
    (8) VarDecl -> . Type VarList SEMICOLON
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    PRINT           reduce using rule 4 (empty -> .)
    LCURLY          reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    INC             reduce using rule 4 (empty -> .)
    DEC             reduce using rule 4 (empty -> .)
    IDENTIFIER      reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    NUMBER          reduce using rule 4 (empty -> .)
    TRUE            reduce using rule 4 (empty -> .)
    FALSE           reduce using rule 4 (empty -> .)
    THIS            reduce using rule 4 (empty -> .)
    SUPER           reduce using rule 4 (empty -> .)
    INPUT           reduce using rule 4 (empty -> .)
    NEW             reduce using rule 4 (empty -> .)
    RCURLY          reduce using rule 4 (empty -> .)
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    VarDeclstar                    shift and go to state 110
    VarDecl                        shift and go to state 111
    Type                           shift and go to state 112
    empty                          shift and go to state 113

state 57

    (58) While -> WHILE . AE DO Stmt
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 114
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 58

    (43) Stmt -> Do_while .

    CLASS           reduce using rule 43 (Stmt -> Do_while .)
    INT             reduce using rule 43 (Stmt -> Do_while .)
    BOOL            reduce using rule 43 (Stmt -> Do_while .)
    VOID            reduce using rule 43 (Stmt -> Do_while .)
    animal          reduce using rule 43 (Stmt -> Do_while .)
    dog             reduce using rule 43 (Stmt -> Do_while .)
    $end            reduce using rule 43 (Stmt -> Do_while .)
    RCURLY          reduce using rule 43 (Stmt -> Do_while .)
    WHILE           reduce using rule 43 (Stmt -> Do_while .)
    PRINT           reduce using rule 43 (Stmt -> Do_while .)
    LCURLY          reduce using rule 43 (Stmt -> Do_while .)
    IF              reduce using rule 43 (Stmt -> Do_while .)
    FOR             reduce using rule 43 (Stmt -> Do_while .)
    DO              reduce using rule 43 (Stmt -> Do_while .)
    RETURN          reduce using rule 43 (Stmt -> Do_while .)
    INC             reduce using rule 43 (Stmt -> Do_while .)
    DEC             reduce using rule 43 (Stmt -> Do_while .)
    IDENTIFIER      reduce using rule 43 (Stmt -> Do_while .)
    LPAREN          reduce using rule 43 (Stmt -> Do_while .)
    NUMBER          reduce using rule 43 (Stmt -> Do_while .)
    TRUE            reduce using rule 43 (Stmt -> Do_while .)
    FALSE           reduce using rule 43 (Stmt -> Do_while .)
    THIS            reduce using rule 43 (Stmt -> Do_while .)
    SUPER           reduce using rule 43 (Stmt -> Do_while .)
    INPUT           reduce using rule 43 (Stmt -> Do_while .)
    NEW             reduce using rule 43 (Stmt -> Do_while .)
    ELSE            reduce using rule 43 (Stmt -> Do_while .)


state 59

    (91) Primary -> Input .

    DOT             reduce using rule 91 (Primary -> Input .)
    LSQR            reduce using rule 91 (Primary -> Input .)
    COMMA           reduce using rule 91 (Primary -> Input .)
    TIMES           reduce using rule 91 (Primary -> Input .)
    SLASH           reduce using rule 91 (Primary -> Input .)
    PLUS            reduce using rule 91 (Primary -> Input .)
    MINUS           reduce using rule 91 (Primary -> Input .)
    LT              reduce using rule 91 (Primary -> Input .)
    EQ              reduce using rule 91 (Primary -> Input .)
    GT              reduce using rule 91 (Primary -> Input .)
    GTEQ            reduce using rule 91 (Primary -> Input .)
    LTEQ            reduce using rule 91 (Primary -> Input .)
    NEQ             reduce using rule 91 (Primary -> Input .)
    LAND            reduce using rule 91 (Primary -> Input .)
    LOR             reduce using rule 91 (Primary -> Input .)
    MOD             reduce using rule 91 (Primary -> Input .)
    RPAREN          reduce using rule 91 (Primary -> Input .)
    SEMICOLON       reduce using rule 91 (Primary -> Input .)
    DO              reduce using rule 91 (Primary -> Input .)
    THEN            reduce using rule 91 (Primary -> Input .)
    RSQR            reduce using rule 91 (Primary -> Input .)


state 60

    (38) Stmt -> Print .

    CLASS           reduce using rule 38 (Stmt -> Print .)
    INT             reduce using rule 38 (Stmt -> Print .)
    BOOL            reduce using rule 38 (Stmt -> Print .)
    VOID            reduce using rule 38 (Stmt -> Print .)
    animal          reduce using rule 38 (Stmt -> Print .)
    dog             reduce using rule 38 (Stmt -> Print .)
    $end            reduce using rule 38 (Stmt -> Print .)
    RCURLY          reduce using rule 38 (Stmt -> Print .)
    WHILE           reduce using rule 38 (Stmt -> Print .)
    PRINT           reduce using rule 38 (Stmt -> Print .)
    LCURLY          reduce using rule 38 (Stmt -> Print .)
    IF              reduce using rule 38 (Stmt -> Print .)
    FOR             reduce using rule 38 (Stmt -> Print .)
    DO              reduce using rule 38 (Stmt -> Print .)
    RETURN          reduce using rule 38 (Stmt -> Print .)
    INC             reduce using rule 38 (Stmt -> Print .)
    DEC             reduce using rule 38 (Stmt -> Print .)
    IDENTIFIER      reduce using rule 38 (Stmt -> Print .)
    LPAREN          reduce using rule 38 (Stmt -> Print .)
    NUMBER          reduce using rule 38 (Stmt -> Print .)
    TRUE            reduce using rule 38 (Stmt -> Print .)
    FALSE           reduce using rule 38 (Stmt -> Print .)
    THIS            reduce using rule 38 (Stmt -> Print .)
    SUPER           reduce using rule 38 (Stmt -> Print .)
    INPUT           reduce using rule 38 (Stmt -> Print .)
    NEW             reduce using rule 38 (Stmt -> Print .)
    ELSE            reduce using rule 38 (Stmt -> Print .)


state 61

    (101) Input -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 115


state 62

    (52) Dec -> DEC .

    IDENTIFIER      reduce using rule 52 (Dec -> DEC .)
    LPAREN          reduce using rule 52 (Dec -> DEC .)
    NUMBER          reduce using rule 52 (Dec -> DEC .)
    TRUE            reduce using rule 52 (Dec -> DEC .)
    FALSE           reduce using rule 52 (Dec -> DEC .)
    THIS            reduce using rule 52 (Dec -> DEC .)
    SUPER           reduce using rule 52 (Dec -> DEC .)
    INPUT           reduce using rule 52 (Dec -> DEC .)
    NEW             reduce using rule 52 (Dec -> DEC .)
    SEMICOLON       reduce using rule 52 (Dec -> DEC .)
    TIMES           reduce using rule 52 (Dec -> DEC .)
    SLASH           reduce using rule 52 (Dec -> DEC .)
    PLUS            reduce using rule 52 (Dec -> DEC .)
    MINUS           reduce using rule 52 (Dec -> DEC .)
    LT              reduce using rule 52 (Dec -> DEC .)
    EQ              reduce using rule 52 (Dec -> DEC .)
    GT              reduce using rule 52 (Dec -> DEC .)
    GTEQ            reduce using rule 52 (Dec -> DEC .)
    LTEQ            reduce using rule 52 (Dec -> DEC .)
    NEQ             reduce using rule 52 (Dec -> DEC .)
    LAND            reduce using rule 52 (Dec -> DEC .)
    LOR             reduce using rule 52 (Dec -> DEC .)
    MOD             reduce using rule 52 (Dec -> DEC .)
    DO              reduce using rule 52 (Dec -> DEC .)
    RPAREN          reduce using rule 52 (Dec -> DEC .)
    THEN            reduce using rule 52 (Dec -> DEC .)
    COMMA           reduce using rule 52 (Dec -> DEC .)
    RSQR            reduce using rule 52 (Dec -> DEC .)


state 63

    (46) SE -> MethodCall .

    TIMES           reduce using rule 46 (SE -> MethodCall .)
    SLASH           reduce using rule 46 (SE -> MethodCall .)
    PLUS            reduce using rule 46 (SE -> MethodCall .)
    MINUS           reduce using rule 46 (SE -> MethodCall .)
    LT              reduce using rule 46 (SE -> MethodCall .)
    EQ              reduce using rule 46 (SE -> MethodCall .)
    GT              reduce using rule 46 (SE -> MethodCall .)
    GTEQ            reduce using rule 46 (SE -> MethodCall .)
    LTEQ            reduce using rule 46 (SE -> MethodCall .)
    NEQ             reduce using rule 46 (SE -> MethodCall .)
    LAND            reduce using rule 46 (SE -> MethodCall .)
    LOR             reduce using rule 46 (SE -> MethodCall .)
    MOD             reduce using rule 46 (SE -> MethodCall .)
    SEMICOLON       reduce using rule 46 (SE -> MethodCall .)
    DO              reduce using rule 46 (SE -> MethodCall .)
    RPAREN          reduce using rule 46 (SE -> MethodCall .)
    THEN            reduce using rule 46 (SE -> MethodCall .)
    COMMA           reduce using rule 46 (SE -> MethodCall .)
    RSQR            reduce using rule 46 (SE -> MethodCall .)


state 64

    (110) NewObject -> NEW . animal LPAREN RPAREN
    (111) NewObject -> NEW . dog LPAREN RPAREN

    animal          shift and go to state 116
    dog             shift and go to state 117


state 65

    (42) Stmt -> for .

    CLASS           reduce using rule 42 (Stmt -> for .)
    INT             reduce using rule 42 (Stmt -> for .)
    BOOL            reduce using rule 42 (Stmt -> for .)
    VOID            reduce using rule 42 (Stmt -> for .)
    animal          reduce using rule 42 (Stmt -> for .)
    dog             reduce using rule 42 (Stmt -> for .)
    $end            reduce using rule 42 (Stmt -> for .)
    RCURLY          reduce using rule 42 (Stmt -> for .)
    WHILE           reduce using rule 42 (Stmt -> for .)
    PRINT           reduce using rule 42 (Stmt -> for .)
    LCURLY          reduce using rule 42 (Stmt -> for .)
    IF              reduce using rule 42 (Stmt -> for .)
    FOR             reduce using rule 42 (Stmt -> for .)
    DO              reduce using rule 42 (Stmt -> for .)
    RETURN          reduce using rule 42 (Stmt -> for .)
    INC             reduce using rule 42 (Stmt -> for .)
    DEC             reduce using rule 42 (Stmt -> for .)
    IDENTIFIER      reduce using rule 42 (Stmt -> for .)
    LPAREN          reduce using rule 42 (Stmt -> for .)
    NUMBER          reduce using rule 42 (Stmt -> for .)
    TRUE            reduce using rule 42 (Stmt -> for .)
    FALSE           reduce using rule 42 (Stmt -> for .)
    THIS            reduce using rule 42 (Stmt -> for .)
    SUPER           reduce using rule 42 (Stmt -> for .)
    INPUT           reduce using rule 42 (Stmt -> for .)
    NEW             reduce using rule 42 (Stmt -> for .)
    ELSE            reduce using rule 42 (Stmt -> for .)


state 66

    (90) Primary -> super .

    DOT             reduce using rule 90 (Primary -> super .)
    LSQR            reduce using rule 90 (Primary -> super .)
    COMMA           reduce using rule 90 (Primary -> super .)
    TIMES           reduce using rule 90 (Primary -> super .)
    SLASH           reduce using rule 90 (Primary -> super .)
    PLUS            reduce using rule 90 (Primary -> super .)
    MINUS           reduce using rule 90 (Primary -> super .)
    LT              reduce using rule 90 (Primary -> super .)
    EQ              reduce using rule 90 (Primary -> super .)
    GT              reduce using rule 90 (Primary -> super .)
    GTEQ            reduce using rule 90 (Primary -> super .)
    LTEQ            reduce using rule 90 (Primary -> super .)
    NEQ             reduce using rule 90 (Primary -> super .)
    LAND            reduce using rule 90 (Primary -> super .)
    LOR             reduce using rule 90 (Primary -> super .)
    MOD             reduce using rule 90 (Primary -> super .)
    RPAREN          reduce using rule 90 (Primary -> super .)
    SEMICOLON       reduce using rule 90 (Primary -> super .)
    DO              reduce using rule 90 (Primary -> super .)
    THEN            reduce using rule 90 (Primary -> super .)
    RSQR            reduce using rule 90 (Primary -> super .)


state 67

    (9) FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .

    CLASS           reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    INT             reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    BOOL            reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    VOID            reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    animal          reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    dog             reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    $end            reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)
    RCURLY          reduce using rule 9 (FunDecl -> Type Var LPAREN FormalsQ RPAREN Stmt .)


state 68

    (53) Inc -> INC .

    IDENTIFIER      reduce using rule 53 (Inc -> INC .)
    LPAREN          reduce using rule 53 (Inc -> INC .)
    NUMBER          reduce using rule 53 (Inc -> INC .)
    TRUE            reduce using rule 53 (Inc -> INC .)
    FALSE           reduce using rule 53 (Inc -> INC .)
    THIS            reduce using rule 53 (Inc -> INC .)
    SUPER           reduce using rule 53 (Inc -> INC .)
    INPUT           reduce using rule 53 (Inc -> INC .)
    NEW             reduce using rule 53 (Inc -> INC .)
    SEMICOLON       reduce using rule 53 (Inc -> INC .)
    TIMES           reduce using rule 53 (Inc -> INC .)
    SLASH           reduce using rule 53 (Inc -> INC .)
    PLUS            reduce using rule 53 (Inc -> INC .)
    MINUS           reduce using rule 53 (Inc -> INC .)
    LT              reduce using rule 53 (Inc -> INC .)
    EQ              reduce using rule 53 (Inc -> INC .)
    GT              reduce using rule 53 (Inc -> INC .)
    GTEQ            reduce using rule 53 (Inc -> INC .)
    LTEQ            reduce using rule 53 (Inc -> INC .)
    NEQ             reduce using rule 53 (Inc -> INC .)
    LAND            reduce using rule 53 (Inc -> INC .)
    LOR             reduce using rule 53 (Inc -> INC .)
    MOD             reduce using rule 53 (Inc -> INC .)
    DO              reduce using rule 53 (Inc -> INC .)
    RPAREN          reduce using rule 53 (Inc -> INC .)
    THEN            reduce using rule 53 (Inc -> INC .)
    COMMA           reduce using rule 53 (Inc -> INC .)
    RSQR            reduce using rule 53 (Inc -> INC .)


state 69

    (104) FieldAccess -> IDENTIFIER .

    LPAREN          reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    DOT             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    LSQR            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    THEN            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    TIMES           reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    SLASH           reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    PLUS            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    MINUS           reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    LT              reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    EQ              reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    GT              reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    GTEQ            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    LTEQ            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    NEQ             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    LAND            reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    LOR             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    MOD             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    EQUALS          reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    INC             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    DEC             reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    SEMICOLON       reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    DO              reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    RPAREN          reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    COMMA           reduce using rule 104 (FieldAccess -> IDENTIFIER .)
    RSQR            reduce using rule 104 (FieldAccess -> IDENTIFIER .)


state 70

    (60) for -> FOR . LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt

    LPAREN          shift and go to state 118


state 71

    (88) Primary -> false .

    DOT             reduce using rule 88 (Primary -> false .)
    LSQR            reduce using rule 88 (Primary -> false .)
    COMMA           reduce using rule 88 (Primary -> false .)
    TIMES           reduce using rule 88 (Primary -> false .)
    SLASH           reduce using rule 88 (Primary -> false .)
    PLUS            reduce using rule 88 (Primary -> false .)
    MINUS           reduce using rule 88 (Primary -> false .)
    LT              reduce using rule 88 (Primary -> false .)
    EQ              reduce using rule 88 (Primary -> false .)
    GT              reduce using rule 88 (Primary -> false .)
    GTEQ            reduce using rule 88 (Primary -> false .)
    LTEQ            reduce using rule 88 (Primary -> false .)
    NEQ             reduce using rule 88 (Primary -> false .)
    LAND            reduce using rule 88 (Primary -> false .)
    LOR             reduce using rule 88 (Primary -> false .)
    MOD             reduce using rule 88 (Primary -> false .)
    RPAREN          reduce using rule 88 (Primary -> false .)
    SEMICOLON       reduce using rule 88 (Primary -> false .)
    DO              reduce using rule 88 (Primary -> false .)
    THEN            reduce using rule 88 (Primary -> false .)
    RSQR            reduce using rule 88 (Primary -> false .)


state 72

    (41) Stmt -> While .

    CLASS           reduce using rule 41 (Stmt -> While .)
    INT             reduce using rule 41 (Stmt -> While .)
    BOOL            reduce using rule 41 (Stmt -> While .)
    VOID            reduce using rule 41 (Stmt -> While .)
    animal          reduce using rule 41 (Stmt -> While .)
    dog             reduce using rule 41 (Stmt -> While .)
    $end            reduce using rule 41 (Stmt -> While .)
    RCURLY          reduce using rule 41 (Stmt -> While .)
    WHILE           reduce using rule 41 (Stmt -> While .)
    PRINT           reduce using rule 41 (Stmt -> While .)
    LCURLY          reduce using rule 41 (Stmt -> While .)
    IF              reduce using rule 41 (Stmt -> While .)
    FOR             reduce using rule 41 (Stmt -> While .)
    DO              reduce using rule 41 (Stmt -> While .)
    RETURN          reduce using rule 41 (Stmt -> While .)
    INC             reduce using rule 41 (Stmt -> While .)
    DEC             reduce using rule 41 (Stmt -> While .)
    IDENTIFIER      reduce using rule 41 (Stmt -> While .)
    LPAREN          reduce using rule 41 (Stmt -> While .)
    NUMBER          reduce using rule 41 (Stmt -> While .)
    TRUE            reduce using rule 41 (Stmt -> While .)
    FALSE           reduce using rule 41 (Stmt -> While .)
    THIS            reduce using rule 41 (Stmt -> While .)
    SUPER           reduce using rule 41 (Stmt -> While .)
    INPUT           reduce using rule 41 (Stmt -> While .)
    NEW             reduce using rule 41 (Stmt -> While .)
    ELSE            reduce using rule 41 (Stmt -> While .)


state 73

    (47) Assign -> Lhs . EQUALS AE
    (48) Assign -> Lhs . Inc
    (49) Assign -> Lhs . Dec
    (53) Inc -> . INC
    (52) Dec -> . DEC

    EQUALS          shift and go to state 119
    INC             shift and go to state 68
    DEC             shift and go to state 62

    Dec                            shift and go to state 121
    Inc                            shift and go to state 120

state 74

    (92) Primary -> LPAREN . AE RPAREN
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 122
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 75

    (86) Primary -> intconst .

    DOT             reduce using rule 86 (Primary -> intconst .)
    LSQR            reduce using rule 86 (Primary -> intconst .)
    COMMA           reduce using rule 86 (Primary -> intconst .)
    TIMES           reduce using rule 86 (Primary -> intconst .)
    SLASH           reduce using rule 86 (Primary -> intconst .)
    PLUS            reduce using rule 86 (Primary -> intconst .)
    MINUS           reduce using rule 86 (Primary -> intconst .)
    LT              reduce using rule 86 (Primary -> intconst .)
    EQ              reduce using rule 86 (Primary -> intconst .)
    GT              reduce using rule 86 (Primary -> intconst .)
    GTEQ            reduce using rule 86 (Primary -> intconst .)
    LTEQ            reduce using rule 86 (Primary -> intconst .)
    NEQ             reduce using rule 86 (Primary -> intconst .)
    LAND            reduce using rule 86 (Primary -> intconst .)
    LOR             reduce using rule 86 (Primary -> intconst .)
    MOD             reduce using rule 86 (Primary -> intconst .)
    RPAREN          reduce using rule 86 (Primary -> intconst .)
    SEMICOLON       reduce using rule 86 (Primary -> intconst .)
    DO              reduce using rule 86 (Primary -> intconst .)
    THEN            reduce using rule 86 (Primary -> intconst .)
    RSQR            reduce using rule 86 (Primary -> intconst .)


state 76

    (44) Stmt -> Return .

    CLASS           reduce using rule 44 (Stmt -> Return .)
    INT             reduce using rule 44 (Stmt -> Return .)
    BOOL            reduce using rule 44 (Stmt -> Return .)
    VOID            reduce using rule 44 (Stmt -> Return .)
    animal          reduce using rule 44 (Stmt -> Return .)
    dog             reduce using rule 44 (Stmt -> Return .)
    $end            reduce using rule 44 (Stmt -> Return .)
    RCURLY          reduce using rule 44 (Stmt -> Return .)
    WHILE           reduce using rule 44 (Stmt -> Return .)
    PRINT           reduce using rule 44 (Stmt -> Return .)
    LCURLY          reduce using rule 44 (Stmt -> Return .)
    IF              reduce using rule 44 (Stmt -> Return .)
    FOR             reduce using rule 44 (Stmt -> Return .)
    DO              reduce using rule 44 (Stmt -> Return .)
    RETURN          reduce using rule 44 (Stmt -> Return .)
    INC             reduce using rule 44 (Stmt -> Return .)
    DEC             reduce using rule 44 (Stmt -> Return .)
    IDENTIFIER      reduce using rule 44 (Stmt -> Return .)
    LPAREN          reduce using rule 44 (Stmt -> Return .)
    NUMBER          reduce using rule 44 (Stmt -> Return .)
    TRUE            reduce using rule 44 (Stmt -> Return .)
    FALSE           reduce using rule 44 (Stmt -> Return .)
    THIS            reduce using rule 44 (Stmt -> Return .)
    SUPER           reduce using rule 44 (Stmt -> Return .)
    INPUT           reduce using rule 44 (Stmt -> Return .)
    NEW             reduce using rule 44 (Stmt -> Return .)
    ELSE            reduce using rule 44 (Stmt -> Return .)


state 77

    (67) Lhs -> ArrayAccess .
    (94) Primary -> ArrayAccess .

    EQUALS          reduce using rule 67 (Lhs -> ArrayAccess .)
    INC             reduce using rule 67 (Lhs -> ArrayAccess .)
    DEC             reduce using rule 67 (Lhs -> ArrayAccess .)
    SEMICOLON       reduce using rule 67 (Lhs -> ArrayAccess .)
    TIMES           reduce using rule 67 (Lhs -> ArrayAccess .)
    SLASH           reduce using rule 67 (Lhs -> ArrayAccess .)
    PLUS            reduce using rule 67 (Lhs -> ArrayAccess .)
    MINUS           reduce using rule 67 (Lhs -> ArrayAccess .)
    LT              reduce using rule 67 (Lhs -> ArrayAccess .)
    EQ              reduce using rule 67 (Lhs -> ArrayAccess .)
    GT              reduce using rule 67 (Lhs -> ArrayAccess .)
    GTEQ            reduce using rule 67 (Lhs -> ArrayAccess .)
    LTEQ            reduce using rule 67 (Lhs -> ArrayAccess .)
    NEQ             reduce using rule 67 (Lhs -> ArrayAccess .)
    LAND            reduce using rule 67 (Lhs -> ArrayAccess .)
    LOR             reduce using rule 67 (Lhs -> ArrayAccess .)
    MOD             reduce using rule 67 (Lhs -> ArrayAccess .)
    DO              reduce using rule 67 (Lhs -> ArrayAccess .)
    RPAREN          reduce using rule 67 (Lhs -> ArrayAccess .)
    THEN            reduce using rule 67 (Lhs -> ArrayAccess .)
    COMMA           reduce using rule 67 (Lhs -> ArrayAccess .)
    RSQR            reduce using rule 67 (Lhs -> ArrayAccess .)
    DOT             reduce using rule 94 (Primary -> ArrayAccess .)
    LSQR            reduce using rule 94 (Primary -> ArrayAccess .)


state 78

    (51) Assign -> Dec . Lhs
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    super                          shift and go to state 66
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 124
    Primary                        shift and go to state 86
    Lhs                            shift and go to state 123
    NewObject                      shift and go to state 88
    Input                          shift and go to state 59
    intconst                       shift and go to state 75
    false                          shift and go to state 71
    ArrayAccess                    shift and go to state 77
    true                           shift and go to state 79

state 79

    (87) Primary -> true .

    DOT             reduce using rule 87 (Primary -> true .)
    LSQR            reduce using rule 87 (Primary -> true .)
    COMMA           reduce using rule 87 (Primary -> true .)
    TIMES           reduce using rule 87 (Primary -> true .)
    SLASH           reduce using rule 87 (Primary -> true .)
    PLUS            reduce using rule 87 (Primary -> true .)
    MINUS           reduce using rule 87 (Primary -> true .)
    LT              reduce using rule 87 (Primary -> true .)
    EQ              reduce using rule 87 (Primary -> true .)
    GT              reduce using rule 87 (Primary -> true .)
    GTEQ            reduce using rule 87 (Primary -> true .)
    LTEQ            reduce using rule 87 (Primary -> true .)
    NEQ             reduce using rule 87 (Primary -> true .)
    LAND            reduce using rule 87 (Primary -> true .)
    LOR             reduce using rule 87 (Primary -> true .)
    MOD             reduce using rule 87 (Primary -> true .)
    RPAREN          reduce using rule 87 (Primary -> true .)
    SEMICOLON       reduce using rule 87 (Primary -> true .)
    DO              reduce using rule 87 (Primary -> true .)
    THEN            reduce using rule 87 (Primary -> true .)
    RSQR            reduce using rule 87 (Primary -> true .)


state 80

    (45) SE -> Assign .

    TIMES           reduce using rule 45 (SE -> Assign .)
    SLASH           reduce using rule 45 (SE -> Assign .)
    PLUS            reduce using rule 45 (SE -> Assign .)
    MINUS           reduce using rule 45 (SE -> Assign .)
    LT              reduce using rule 45 (SE -> Assign .)
    EQ              reduce using rule 45 (SE -> Assign .)
    GT              reduce using rule 45 (SE -> Assign .)
    GTEQ            reduce using rule 45 (SE -> Assign .)
    LTEQ            reduce using rule 45 (SE -> Assign .)
    NEQ             reduce using rule 45 (SE -> Assign .)
    LAND            reduce using rule 45 (SE -> Assign .)
    LOR             reduce using rule 45 (SE -> Assign .)
    MOD             reduce using rule 45 (SE -> Assign .)
    SEMICOLON       reduce using rule 45 (SE -> Assign .)
    DO              reduce using rule 45 (SE -> Assign .)
    RPAREN          reduce using rule 45 (SE -> Assign .)
    THEN            reduce using rule 45 (SE -> Assign .)
    COMMA           reduce using rule 45 (SE -> Assign .)
    RSQR            reduce using rule 45 (SE -> Assign .)


state 81

    (39) Stmt -> Block .

    CLASS           reduce using rule 39 (Stmt -> Block .)
    INT             reduce using rule 39 (Stmt -> Block .)
    BOOL            reduce using rule 39 (Stmt -> Block .)
    VOID            reduce using rule 39 (Stmt -> Block .)
    animal          reduce using rule 39 (Stmt -> Block .)
    dog             reduce using rule 39 (Stmt -> Block .)
    $end            reduce using rule 39 (Stmt -> Block .)
    RCURLY          reduce using rule 39 (Stmt -> Block .)
    WHILE           reduce using rule 39 (Stmt -> Block .)
    PRINT           reduce using rule 39 (Stmt -> Block .)
    LCURLY          reduce using rule 39 (Stmt -> Block .)
    IF              reduce using rule 39 (Stmt -> Block .)
    FOR             reduce using rule 39 (Stmt -> Block .)
    DO              reduce using rule 39 (Stmt -> Block .)
    RETURN          reduce using rule 39 (Stmt -> Block .)
    INC             reduce using rule 39 (Stmt -> Block .)
    DEC             reduce using rule 39 (Stmt -> Block .)
    IDENTIFIER      reduce using rule 39 (Stmt -> Block .)
    LPAREN          reduce using rule 39 (Stmt -> Block .)
    NUMBER          reduce using rule 39 (Stmt -> Block .)
    TRUE            reduce using rule 39 (Stmt -> Block .)
    FALSE           reduce using rule 39 (Stmt -> Block .)
    THIS            reduce using rule 39 (Stmt -> Block .)
    SUPER           reduce using rule 39 (Stmt -> Block .)
    INPUT           reduce using rule 39 (Stmt -> Block .)
    NEW             reduce using rule 39 (Stmt -> Block .)
    ELSE            reduce using rule 39 (Stmt -> Block .)


state 82

    (56) If -> IF . AE THEN Stmt
    (57) If -> IF . AE THEN Stmt ELSE Stmt
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 125
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 83

    (98) false -> FALSE .

    DOT             reduce using rule 98 (false -> FALSE .)
    LSQR            reduce using rule 98 (false -> FALSE .)
    TIMES           reduce using rule 98 (false -> FALSE .)
    SLASH           reduce using rule 98 (false -> FALSE .)
    PLUS            reduce using rule 98 (false -> FALSE .)
    MINUS           reduce using rule 98 (false -> FALSE .)
    LT              reduce using rule 98 (false -> FALSE .)
    EQ              reduce using rule 98 (false -> FALSE .)
    GT              reduce using rule 98 (false -> FALSE .)
    GTEQ            reduce using rule 98 (false -> FALSE .)
    LTEQ            reduce using rule 98 (false -> FALSE .)
    NEQ             reduce using rule 98 (false -> FALSE .)
    LAND            reduce using rule 98 (false -> FALSE .)
    LOR             reduce using rule 98 (false -> FALSE .)
    MOD             reduce using rule 98 (false -> FALSE .)
    SEMICOLON       reduce using rule 98 (false -> FALSE .)
    DO              reduce using rule 98 (false -> FALSE .)
    RPAREN          reduce using rule 98 (false -> FALSE .)
    THEN            reduce using rule 98 (false -> FALSE .)
    COMMA           reduce using rule 98 (false -> FALSE .)
    RSQR            reduce using rule 98 (false -> FALSE .)


state 84

    (89) Primary -> this .

    DOT             reduce using rule 89 (Primary -> this .)
    LSQR            reduce using rule 89 (Primary -> this .)
    COMMA           reduce using rule 89 (Primary -> this .)
    TIMES           reduce using rule 89 (Primary -> this .)
    SLASH           reduce using rule 89 (Primary -> this .)
    PLUS            reduce using rule 89 (Primary -> this .)
    MINUS           reduce using rule 89 (Primary -> this .)
    LT              reduce using rule 89 (Primary -> this .)
    EQ              reduce using rule 89 (Primary -> this .)
    GT              reduce using rule 89 (Primary -> this .)
    GTEQ            reduce using rule 89 (Primary -> this .)
    LTEQ            reduce using rule 89 (Primary -> this .)
    NEQ             reduce using rule 89 (Primary -> this .)
    LAND            reduce using rule 89 (Primary -> this .)
    LOR             reduce using rule 89 (Primary -> this .)
    MOD             reduce using rule 89 (Primary -> this .)
    RPAREN          reduce using rule 89 (Primary -> this .)
    SEMICOLON       reduce using rule 89 (Primary -> this .)
    DO              reduce using rule 89 (Primary -> this .)
    THEN            reduce using rule 89 (Primary -> this .)
    RSQR            reduce using rule 89 (Primary -> this .)


state 85

    (105) MethodCall -> FieldAccess . LPAREN ArgsQ RPAREN
    (66) Lhs -> FieldAccess .
    (93) Primary -> FieldAccess .

    LPAREN          shift and go to state 126
    EQUALS          reduce using rule 66 (Lhs -> FieldAccess .)
    INC             reduce using rule 66 (Lhs -> FieldAccess .)
    DEC             reduce using rule 66 (Lhs -> FieldAccess .)
    DOT             reduce using rule 93 (Primary -> FieldAccess .)
    LSQR            reduce using rule 93 (Primary -> FieldAccess .)


state 86

    (103) FieldAccess -> Primary . DOT IDENTIFIER
    (102) ArrayAccess -> Primary . LSQR AE RSQR

    DOT             shift and go to state 128
    LSQR            shift and go to state 127


state 87

    (99) this -> THIS .

    DOT             reduce using rule 99 (this -> THIS .)
    LSQR            reduce using rule 99 (this -> THIS .)
    TIMES           reduce using rule 99 (this -> THIS .)
    SLASH           reduce using rule 99 (this -> THIS .)
    PLUS            reduce using rule 99 (this -> THIS .)
    MINUS           reduce using rule 99 (this -> THIS .)
    LT              reduce using rule 99 (this -> THIS .)
    EQ              reduce using rule 99 (this -> THIS .)
    GT              reduce using rule 99 (this -> THIS .)
    GTEQ            reduce using rule 99 (this -> THIS .)
    LTEQ            reduce using rule 99 (this -> THIS .)
    NEQ             reduce using rule 99 (this -> THIS .)
    LAND            reduce using rule 99 (this -> THIS .)
    LOR             reduce using rule 99 (this -> THIS .)
    MOD             reduce using rule 99 (this -> THIS .)
    SEMICOLON       reduce using rule 99 (this -> THIS .)
    DO              reduce using rule 99 (this -> THIS .)
    RPAREN          reduce using rule 99 (this -> THIS .)
    THEN            reduce using rule 99 (this -> THIS .)
    COMMA           reduce using rule 99 (this -> THIS .)
    RSQR            reduce using rule 99 (this -> THIS .)


state 88

    (95) Primary -> NewObject .

    DOT             reduce using rule 95 (Primary -> NewObject .)
    LSQR            reduce using rule 95 (Primary -> NewObject .)
    COMMA           reduce using rule 95 (Primary -> NewObject .)
    TIMES           reduce using rule 95 (Primary -> NewObject .)
    SLASH           reduce using rule 95 (Primary -> NewObject .)
    PLUS            reduce using rule 95 (Primary -> NewObject .)
    MINUS           reduce using rule 95 (Primary -> NewObject .)
    LT              reduce using rule 95 (Primary -> NewObject .)
    EQ              reduce using rule 95 (Primary -> NewObject .)
    GT              reduce using rule 95 (Primary -> NewObject .)
    GTEQ            reduce using rule 95 (Primary -> NewObject .)
    LTEQ            reduce using rule 95 (Primary -> NewObject .)
    NEQ             reduce using rule 95 (Primary -> NewObject .)
    LAND            reduce using rule 95 (Primary -> NewObject .)
    LOR             reduce using rule 95 (Primary -> NewObject .)
    MOD             reduce using rule 95 (Primary -> NewObject .)
    RPAREN          reduce using rule 95 (Primary -> NewObject .)
    SEMICOLON       reduce using rule 95 (Primary -> NewObject .)
    DO              reduce using rule 95 (Primary -> NewObject .)
    THEN            reduce using rule 95 (Primary -> NewObject .)
    RSQR            reduce using rule 95 (Primary -> NewObject .)


state 89

    (97) true -> TRUE .

    DOT             reduce using rule 97 (true -> TRUE .)
    LSQR            reduce using rule 97 (true -> TRUE .)
    TIMES           reduce using rule 97 (true -> TRUE .)
    SLASH           reduce using rule 97 (true -> TRUE .)
    PLUS            reduce using rule 97 (true -> TRUE .)
    MINUS           reduce using rule 97 (true -> TRUE .)
    LT              reduce using rule 97 (true -> TRUE .)
    EQ              reduce using rule 97 (true -> TRUE .)
    GT              reduce using rule 97 (true -> TRUE .)
    GTEQ            reduce using rule 97 (true -> TRUE .)
    LTEQ            reduce using rule 97 (true -> TRUE .)
    NEQ             reduce using rule 97 (true -> TRUE .)
    LAND            reduce using rule 97 (true -> TRUE .)
    LOR             reduce using rule 97 (true -> TRUE .)
    MOD             reduce using rule 97 (true -> TRUE .)
    SEMICOLON       reduce using rule 97 (true -> TRUE .)
    DO              reduce using rule 97 (true -> TRUE .)
    RPAREN          reduce using rule 97 (true -> TRUE .)
    THEN            reduce using rule 97 (true -> TRUE .)
    COMMA           reduce using rule 97 (true -> TRUE .)
    RSQR            reduce using rule 97 (true -> TRUE .)


state 90

    (50) Assign -> Inc . Lhs
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    super                          shift and go to state 66
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 124
    Primary                        shift and go to state 86
    Lhs                            shift and go to state 129
    NewObject                      shift and go to state 88
    Input                          shift and go to state 59
    intconst                       shift and go to state 75
    false                          shift and go to state 71
    ArrayAccess                    shift and go to state 77
    true                           shift and go to state 79

state 91

    (100) super -> SUPER .

    DOT             reduce using rule 100 (super -> SUPER .)
    LSQR            reduce using rule 100 (super -> SUPER .)
    TIMES           reduce using rule 100 (super -> SUPER .)
    SLASH           reduce using rule 100 (super -> SUPER .)
    PLUS            reduce using rule 100 (super -> SUPER .)
    MINUS           reduce using rule 100 (super -> SUPER .)
    LT              reduce using rule 100 (super -> SUPER .)
    EQ              reduce using rule 100 (super -> SUPER .)
    GT              reduce using rule 100 (super -> SUPER .)
    GTEQ            reduce using rule 100 (super -> SUPER .)
    LTEQ            reduce using rule 100 (super -> SUPER .)
    NEQ             reduce using rule 100 (super -> SUPER .)
    LAND            reduce using rule 100 (super -> SUPER .)
    LOR             reduce using rule 100 (super -> SUPER .)
    MOD             reduce using rule 100 (super -> SUPER .)
    SEMICOLON       reduce using rule 100 (super -> SUPER .)
    DO              reduce using rule 100 (super -> SUPER .)
    RPAREN          reduce using rule 100 (super -> SUPER .)
    THEN            reduce using rule 100 (super -> SUPER .)
    COMMA           reduce using rule 100 (super -> SUPER .)
    RSQR            reduce using rule 100 (super -> SUPER .)


state 92

    (37) Stmt -> SE . SEMICOLON

    SEMICOLON       shift and go to state 130


state 93

    (40) Stmt -> If .

    CLASS           reduce using rule 40 (Stmt -> If .)
    INT             reduce using rule 40 (Stmt -> If .)
    BOOL            reduce using rule 40 (Stmt -> If .)
    VOID            reduce using rule 40 (Stmt -> If .)
    animal          reduce using rule 40 (Stmt -> If .)
    dog             reduce using rule 40 (Stmt -> If .)
    $end            reduce using rule 40 (Stmt -> If .)
    RCURLY          reduce using rule 40 (Stmt -> If .)
    WHILE           reduce using rule 40 (Stmt -> If .)
    PRINT           reduce using rule 40 (Stmt -> If .)
    LCURLY          reduce using rule 40 (Stmt -> If .)
    IF              reduce using rule 40 (Stmt -> If .)
    FOR             reduce using rule 40 (Stmt -> If .)
    DO              reduce using rule 40 (Stmt -> If .)
    RETURN          reduce using rule 40 (Stmt -> If .)
    INC             reduce using rule 40 (Stmt -> If .)
    DEC             reduce using rule 40 (Stmt -> If .)
    IDENTIFIER      reduce using rule 40 (Stmt -> If .)
    LPAREN          reduce using rule 40 (Stmt -> If .)
    NUMBER          reduce using rule 40 (Stmt -> If .)
    TRUE            reduce using rule 40 (Stmt -> If .)
    FALSE           reduce using rule 40 (Stmt -> If .)
    THIS            reduce using rule 40 (Stmt -> If .)
    SUPER           reduce using rule 40 (Stmt -> If .)
    INPUT           reduce using rule 40 (Stmt -> If .)
    NEW             reduce using rule 40 (Stmt -> If .)
    ELSE            reduce using rule 40 (Stmt -> If .)


state 94

    (33) Formals -> Type Var COMMA . Formals
    (33) Formals -> . Type Var COMMA Formals
    (34) Formals -> . Type Var
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    Type                           shift and go to state 38
    Formals                        shift and go to state 131

state 95

    (17) MemberDeclstar -> MemberDecl MemberDeclstar .

    RCURLY          reduce using rule 17 (MemberDeclstar -> MemberDecl MemberDeclstar .)


state 96

    (10) ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .

    CLASS           reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    INT             reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    BOOL            reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    VOID            reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    animal          reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    dog             reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)
    $end            reduce using rule 10 (ClassDecl -> CLASS class_name ExtendsQ LCURLY MemberDeclstar RCURLY .)


state 97

    (65) Return -> RETURN AEQ . SEMICOLON

    SEMICOLON       shift and go to state 132


state 98

    (81) AE -> MINUS . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 133
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 99

    (112) NewArray -> NEW . Type DimExpr Dimstar
    (110) NewObject -> NEW . animal LPAREN RPAREN
    (111) NewObject -> NEW . dog LPAREN RPAREN
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    animal          shift and go to state 134
    dog             shift and go to state 136
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1

    Type                           shift and go to state 135

state 100

    (85) AE -> NewArray .

    RSQR            reduce using rule 85 (AE -> NewArray .)
    TIMES           reduce using rule 85 (AE -> NewArray .)
    SLASH           reduce using rule 85 (AE -> NewArray .)
    PLUS            reduce using rule 85 (AE -> NewArray .)
    MINUS           reduce using rule 85 (AE -> NewArray .)
    LT              reduce using rule 85 (AE -> NewArray .)
    EQ              reduce using rule 85 (AE -> NewArray .)
    GT              reduce using rule 85 (AE -> NewArray .)
    GTEQ            reduce using rule 85 (AE -> NewArray .)
    LTEQ            reduce using rule 85 (AE -> NewArray .)
    NEQ             reduce using rule 85 (AE -> NewArray .)
    LAND            reduce using rule 85 (AE -> NewArray .)
    LOR             reduce using rule 85 (AE -> NewArray .)
    MOD             reduce using rule 85 (AE -> NewArray .)
    SEMICOLON       reduce using rule 85 (AE -> NewArray .)
    DO              reduce using rule 85 (AE -> NewArray .)
    RPAREN          reduce using rule 85 (AE -> NewArray .)
    THEN            reduce using rule 85 (AE -> NewArray .)
    COMMA           reduce using rule 85 (AE -> NewArray .)


state 101

    (63) AEQ -> empty .

    SEMICOLON       reduce using rule 63 (AEQ -> empty .)


state 102

    (64) AEQ -> AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    SEMICOLON       reduce using rule 64 (AEQ -> AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 103

    (94) Primary -> ArrayAccess .
    (67) Lhs -> ArrayAccess .

    DOT             reduce using rule 94 (Primary -> ArrayAccess .)
    LSQR            reduce using rule 94 (Primary -> ArrayAccess .)
    COMMA           reduce using rule 94 (Primary -> ArrayAccess .)
    TIMES           reduce using rule 94 (Primary -> ArrayAccess .)
    SLASH           reduce using rule 94 (Primary -> ArrayAccess .)
    PLUS            reduce using rule 94 (Primary -> ArrayAccess .)
    MINUS           reduce using rule 94 (Primary -> ArrayAccess .)
    LT              reduce using rule 94 (Primary -> ArrayAccess .)
    EQ              reduce using rule 94 (Primary -> ArrayAccess .)
    GT              reduce using rule 94 (Primary -> ArrayAccess .)
    GTEQ            reduce using rule 94 (Primary -> ArrayAccess .)
    LTEQ            reduce using rule 94 (Primary -> ArrayAccess .)
    NEQ             reduce using rule 94 (Primary -> ArrayAccess .)
    LAND            reduce using rule 94 (Primary -> ArrayAccess .)
    LOR             reduce using rule 94 (Primary -> ArrayAccess .)
    MOD             reduce using rule 94 (Primary -> ArrayAccess .)
    RPAREN          reduce using rule 94 (Primary -> ArrayAccess .)
    SEMICOLON       reduce using rule 94 (Primary -> ArrayAccess .)
    DO              reduce using rule 94 (Primary -> ArrayAccess .)
    THEN            reduce using rule 94 (Primary -> ArrayAccess .)
    RSQR            reduce using rule 94 (Primary -> ArrayAccess .)
    EQUALS          reduce using rule 67 (Lhs -> ArrayAccess .)
    INC             reduce using rule 67 (Lhs -> ArrayAccess .)
    DEC             reduce using rule 67 (Lhs -> ArrayAccess .)


state 104

    (93) Primary -> FieldAccess .
    (105) MethodCall -> FieldAccess . LPAREN ArgsQ RPAREN
    (66) Lhs -> FieldAccess .

    DOT             reduce using rule 93 (Primary -> FieldAccess .)
    LSQR            reduce using rule 93 (Primary -> FieldAccess .)
    COMMA           reduce using rule 93 (Primary -> FieldAccess .)
    TIMES           reduce using rule 93 (Primary -> FieldAccess .)
    SLASH           reduce using rule 93 (Primary -> FieldAccess .)
    PLUS            reduce using rule 93 (Primary -> FieldAccess .)
    MINUS           reduce using rule 93 (Primary -> FieldAccess .)
    LT              reduce using rule 93 (Primary -> FieldAccess .)
    EQ              reduce using rule 93 (Primary -> FieldAccess .)
    GT              reduce using rule 93 (Primary -> FieldAccess .)
    GTEQ            reduce using rule 93 (Primary -> FieldAccess .)
    LTEQ            reduce using rule 93 (Primary -> FieldAccess .)
    NEQ             reduce using rule 93 (Primary -> FieldAccess .)
    LAND            reduce using rule 93 (Primary -> FieldAccess .)
    LOR             reduce using rule 93 (Primary -> FieldAccess .)
    MOD             reduce using rule 93 (Primary -> FieldAccess .)
    RPAREN          reduce using rule 93 (Primary -> FieldAccess .)
    SEMICOLON       reduce using rule 93 (Primary -> FieldAccess .)
    DO              reduce using rule 93 (Primary -> FieldAccess .)
    THEN            reduce using rule 93 (Primary -> FieldAccess .)
    RSQR            reduce using rule 93 (Primary -> FieldAccess .)
    LPAREN          shift and go to state 126
    EQUALS          reduce using rule 66 (Lhs -> FieldAccess .)
    INC             reduce using rule 66 (Lhs -> FieldAccess .)
    DEC             reduce using rule 66 (Lhs -> FieldAccess .)


state 105

    (83) AE -> Primary .
    (103) FieldAccess -> Primary . DOT IDENTIFIER
    (102) ArrayAccess -> Primary . LSQR AE RSQR

    RSQR            reduce using rule 83 (AE -> Primary .)
    TIMES           reduce using rule 83 (AE -> Primary .)
    SLASH           reduce using rule 83 (AE -> Primary .)
    PLUS            reduce using rule 83 (AE -> Primary .)
    MINUS           reduce using rule 83 (AE -> Primary .)
    LT              reduce using rule 83 (AE -> Primary .)
    EQ              reduce using rule 83 (AE -> Primary .)
    GT              reduce using rule 83 (AE -> Primary .)
    GTEQ            reduce using rule 83 (AE -> Primary .)
    LTEQ            reduce using rule 83 (AE -> Primary .)
    NEQ             reduce using rule 83 (AE -> Primary .)
    LAND            reduce using rule 83 (AE -> Primary .)
    LOR             reduce using rule 83 (AE -> Primary .)
    MOD             reduce using rule 83 (AE -> Primary .)
    SEMICOLON       reduce using rule 83 (AE -> Primary .)
    DO              reduce using rule 83 (AE -> Primary .)
    RPAREN          reduce using rule 83 (AE -> Primary .)
    THEN            reduce using rule 83 (AE -> Primary .)
    COMMA           reduce using rule 83 (AE -> Primary .)
    DOT             shift and go to state 128
    LSQR            shift and go to state 127


state 106

    (82) AE -> NOT . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 150
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 107

    (84) AE -> SE .

    RSQR            reduce using rule 84 (AE -> SE .)
    TIMES           reduce using rule 84 (AE -> SE .)
    SLASH           reduce using rule 84 (AE -> SE .)
    PLUS            reduce using rule 84 (AE -> SE .)
    MINUS           reduce using rule 84 (AE -> SE .)
    LT              reduce using rule 84 (AE -> SE .)
    EQ              reduce using rule 84 (AE -> SE .)
    GT              reduce using rule 84 (AE -> SE .)
    GTEQ            reduce using rule 84 (AE -> SE .)
    LTEQ            reduce using rule 84 (AE -> SE .)
    NEQ             reduce using rule 84 (AE -> SE .)
    LAND            reduce using rule 84 (AE -> SE .)
    LOR             reduce using rule 84 (AE -> SE .)
    MOD             reduce using rule 84 (AE -> SE .)
    SEMICOLON       reduce using rule 84 (AE -> SE .)
    DO              reduce using rule 84 (AE -> SE .)
    RPAREN          reduce using rule 84 (AE -> SE .)
    THEN            reduce using rule 84 (AE -> SE .)
    COMMA           reduce using rule 84 (AE -> SE .)


state 108

    (59) Do_while -> DO Stmt . WHILE AE SEMICOLON

    WHILE           shift and go to state 151


state 109

    (54) Print -> PRINT LPAREN . AE RPAREN SEMICOLON
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 152
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 110

    (55) Block -> LCURLY VarDeclstar . Stmtstar RCURLY
    (35) Stmtstar -> . empty
    (36) Stmtstar -> . Stmt Stmtstar
    (4) empty -> .
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    RCURLY          reduce using rule 4 (empty -> .)
    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 153
    Stmtstar                       shift and go to state 154
    empty                          shift and go to state 155
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 111

    (23) VarDeclstar -> VarDecl . VarDeclstar
    (22) VarDeclstar -> . empty
    (23) VarDeclstar -> . VarDecl VarDeclstar
    (4) empty -> .
    (8) VarDecl -> . Type VarList SEMICOLON
    (24) Type -> . INT
    (25) Type -> . BOOL
    (26) Type -> . VOID
    (27) Type -> . Type LSQR RSQR
    (28) Type -> . animal
    (29) Type -> . dog

    PRINT           reduce using rule 4 (empty -> .)
    LCURLY          reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    FOR             reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    RETURN          reduce using rule 4 (empty -> .)
    INC             reduce using rule 4 (empty -> .)
    DEC             reduce using rule 4 (empty -> .)
    IDENTIFIER      reduce using rule 4 (empty -> .)
    LPAREN          reduce using rule 4 (empty -> .)
    NUMBER          reduce using rule 4 (empty -> .)
    TRUE            reduce using rule 4 (empty -> .)
    FALSE           reduce using rule 4 (empty -> .)
    THIS            reduce using rule 4 (empty -> .)
    SUPER           reduce using rule 4 (empty -> .)
    INPUT           reduce using rule 4 (empty -> .)
    NEW             reduce using rule 4 (empty -> .)
    RCURLY          reduce using rule 4 (empty -> .)
    INT             shift and go to state 13
    BOOL            shift and go to state 6
    VOID            shift and go to state 1
    animal          shift and go to state 5
    dog             shift and go to state 12

    VarDeclstar                    shift and go to state 156
    Type                           shift and go to state 112
    VarDecl                        shift and go to state 111
    empty                          shift and go to state 113

state 112

    (8) VarDecl -> Type . VarList SEMICOLON
    (27) Type -> Type . LSQR RSQR
    (30) VarList -> . Var COMMA VarList
    (31) VarList -> . Var
    (32) Var -> . IDENTIFIER Dimstar

    LSQR            shift and go to state 16
    IDENTIFIER      shift and go to state 18

    VarList                        shift and go to state 15
    Var                            shift and go to state 35

state 113

    (22) VarDeclstar -> empty .

    PRINT           reduce using rule 22 (VarDeclstar -> empty .)
    LCURLY          reduce using rule 22 (VarDeclstar -> empty .)
    IF              reduce using rule 22 (VarDeclstar -> empty .)
    WHILE           reduce using rule 22 (VarDeclstar -> empty .)
    FOR             reduce using rule 22 (VarDeclstar -> empty .)
    DO              reduce using rule 22 (VarDeclstar -> empty .)
    RETURN          reduce using rule 22 (VarDeclstar -> empty .)
    INC             reduce using rule 22 (VarDeclstar -> empty .)
    DEC             reduce using rule 22 (VarDeclstar -> empty .)
    IDENTIFIER      reduce using rule 22 (VarDeclstar -> empty .)
    LPAREN          reduce using rule 22 (VarDeclstar -> empty .)
    NUMBER          reduce using rule 22 (VarDeclstar -> empty .)
    TRUE            reduce using rule 22 (VarDeclstar -> empty .)
    FALSE           reduce using rule 22 (VarDeclstar -> empty .)
    THIS            reduce using rule 22 (VarDeclstar -> empty .)
    SUPER           reduce using rule 22 (VarDeclstar -> empty .)
    INPUT           reduce using rule 22 (VarDeclstar -> empty .)
    NEW             reduce using rule 22 (VarDeclstar -> empty .)
    RCURLY          reduce using rule 22 (VarDeclstar -> empty .)


state 114

    (58) While -> WHILE AE . DO Stmt
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    DO              shift and go to state 157
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 115

    (101) Input -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 158


state 116

    (110) NewObject -> NEW animal . LPAREN RPAREN

    LPAREN          shift and go to state 159


state 117

    (111) NewObject -> NEW dog . LPAREN RPAREN

    LPAREN          shift and go to state 160


state 118

    (60) for -> FOR LPAREN . SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (61) SEQ -> . empty
    (62) SEQ -> . SE
    (4) empty -> .
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    SEMICOLON       reduce using rule 4 (empty -> .)
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    SEQ                            shift and go to state 161
    true                           shift and go to state 79
    empty                          shift and go to state 162
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    super                          shift and go to state 66
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    SE                             shift and go to state 163
    Inc                            shift and go to state 90

state 119

    (47) Assign -> Lhs EQUALS . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 164
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 120

    (48) Assign -> Lhs Inc .

    TIMES           reduce using rule 48 (Assign -> Lhs Inc .)
    SLASH           reduce using rule 48 (Assign -> Lhs Inc .)
    PLUS            reduce using rule 48 (Assign -> Lhs Inc .)
    MINUS           reduce using rule 48 (Assign -> Lhs Inc .)
    LT              reduce using rule 48 (Assign -> Lhs Inc .)
    EQ              reduce using rule 48 (Assign -> Lhs Inc .)
    GT              reduce using rule 48 (Assign -> Lhs Inc .)
    GTEQ            reduce using rule 48 (Assign -> Lhs Inc .)
    LTEQ            reduce using rule 48 (Assign -> Lhs Inc .)
    NEQ             reduce using rule 48 (Assign -> Lhs Inc .)
    LAND            reduce using rule 48 (Assign -> Lhs Inc .)
    LOR             reduce using rule 48 (Assign -> Lhs Inc .)
    MOD             reduce using rule 48 (Assign -> Lhs Inc .)
    SEMICOLON       reduce using rule 48 (Assign -> Lhs Inc .)
    DO              reduce using rule 48 (Assign -> Lhs Inc .)
    RPAREN          reduce using rule 48 (Assign -> Lhs Inc .)
    THEN            reduce using rule 48 (Assign -> Lhs Inc .)
    COMMA           reduce using rule 48 (Assign -> Lhs Inc .)
    RSQR            reduce using rule 48 (Assign -> Lhs Inc .)


state 121

    (49) Assign -> Lhs Dec .

    TIMES           reduce using rule 49 (Assign -> Lhs Dec .)
    SLASH           reduce using rule 49 (Assign -> Lhs Dec .)
    PLUS            reduce using rule 49 (Assign -> Lhs Dec .)
    MINUS           reduce using rule 49 (Assign -> Lhs Dec .)
    LT              reduce using rule 49 (Assign -> Lhs Dec .)
    EQ              reduce using rule 49 (Assign -> Lhs Dec .)
    GT              reduce using rule 49 (Assign -> Lhs Dec .)
    GTEQ            reduce using rule 49 (Assign -> Lhs Dec .)
    LTEQ            reduce using rule 49 (Assign -> Lhs Dec .)
    NEQ             reduce using rule 49 (Assign -> Lhs Dec .)
    LAND            reduce using rule 49 (Assign -> Lhs Dec .)
    LOR             reduce using rule 49 (Assign -> Lhs Dec .)
    MOD             reduce using rule 49 (Assign -> Lhs Dec .)
    SEMICOLON       reduce using rule 49 (Assign -> Lhs Dec .)
    DO              reduce using rule 49 (Assign -> Lhs Dec .)
    RPAREN          reduce using rule 49 (Assign -> Lhs Dec .)
    THEN            reduce using rule 49 (Assign -> Lhs Dec .)
    COMMA           reduce using rule 49 (Assign -> Lhs Dec .)
    RSQR            reduce using rule 49 (Assign -> Lhs Dec .)


state 122

    (92) Primary -> LPAREN AE . RPAREN
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RPAREN          shift and go to state 165
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 123

    (51) Assign -> Dec Lhs .

    TIMES           reduce using rule 51 (Assign -> Dec Lhs .)
    SLASH           reduce using rule 51 (Assign -> Dec Lhs .)
    PLUS            reduce using rule 51 (Assign -> Dec Lhs .)
    MINUS           reduce using rule 51 (Assign -> Dec Lhs .)
    LT              reduce using rule 51 (Assign -> Dec Lhs .)
    EQ              reduce using rule 51 (Assign -> Dec Lhs .)
    GT              reduce using rule 51 (Assign -> Dec Lhs .)
    GTEQ            reduce using rule 51 (Assign -> Dec Lhs .)
    LTEQ            reduce using rule 51 (Assign -> Dec Lhs .)
    NEQ             reduce using rule 51 (Assign -> Dec Lhs .)
    LAND            reduce using rule 51 (Assign -> Dec Lhs .)
    LOR             reduce using rule 51 (Assign -> Dec Lhs .)
    MOD             reduce using rule 51 (Assign -> Dec Lhs .)
    SEMICOLON       reduce using rule 51 (Assign -> Dec Lhs .)
    DO              reduce using rule 51 (Assign -> Dec Lhs .)
    RPAREN          reduce using rule 51 (Assign -> Dec Lhs .)
    THEN            reduce using rule 51 (Assign -> Dec Lhs .)
    COMMA           reduce using rule 51 (Assign -> Dec Lhs .)
    RSQR            reduce using rule 51 (Assign -> Dec Lhs .)


state 124

    (66) Lhs -> FieldAccess .
    (93) Primary -> FieldAccess .

    SEMICOLON       reduce using rule 66 (Lhs -> FieldAccess .)
    TIMES           reduce using rule 66 (Lhs -> FieldAccess .)
    SLASH           reduce using rule 66 (Lhs -> FieldAccess .)
    PLUS            reduce using rule 66 (Lhs -> FieldAccess .)
    MINUS           reduce using rule 66 (Lhs -> FieldAccess .)
    LT              reduce using rule 66 (Lhs -> FieldAccess .)
    EQ              reduce using rule 66 (Lhs -> FieldAccess .)
    GT              reduce using rule 66 (Lhs -> FieldAccess .)
    GTEQ            reduce using rule 66 (Lhs -> FieldAccess .)
    LTEQ            reduce using rule 66 (Lhs -> FieldAccess .)
    NEQ             reduce using rule 66 (Lhs -> FieldAccess .)
    LAND            reduce using rule 66 (Lhs -> FieldAccess .)
    LOR             reduce using rule 66 (Lhs -> FieldAccess .)
    MOD             reduce using rule 66 (Lhs -> FieldAccess .)
    DO              reduce using rule 66 (Lhs -> FieldAccess .)
    RPAREN          reduce using rule 66 (Lhs -> FieldAccess .)
    THEN            reduce using rule 66 (Lhs -> FieldAccess .)
    COMMA           reduce using rule 66 (Lhs -> FieldAccess .)
    RSQR            reduce using rule 66 (Lhs -> FieldAccess .)
    DOT             reduce using rule 93 (Primary -> FieldAccess .)
    LSQR            reduce using rule 93 (Primary -> FieldAccess .)


state 125

    (56) If -> IF AE . THEN Stmt
    (57) If -> IF AE . THEN Stmt ELSE Stmt
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    THEN            shift and go to state 166
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 126

    (105) MethodCall -> FieldAccess LPAREN . ArgsQ RPAREN
    (106) ArgsQ -> . empty
    (107) ArgsQ -> . Args
    (4) empty -> .
    (108) Args -> . AE COMMA Args
    (109) Args -> . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    RPAREN          reduce using rule 4 (empty -> .)
    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    ArgsQ                          shift and go to state 167
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    Args                           shift and go to state 168
    NewArray                       shift and go to state 100
    empty                          shift and go to state 169
    AE                             shift and go to state 170
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 127

    (102) ArrayAccess -> Primary LSQR . AE RSQR
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 171
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 128

    (103) FieldAccess -> Primary DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 172


state 129

    (50) Assign -> Inc Lhs .

    TIMES           reduce using rule 50 (Assign -> Inc Lhs .)
    SLASH           reduce using rule 50 (Assign -> Inc Lhs .)
    PLUS            reduce using rule 50 (Assign -> Inc Lhs .)
    MINUS           reduce using rule 50 (Assign -> Inc Lhs .)
    LT              reduce using rule 50 (Assign -> Inc Lhs .)
    EQ              reduce using rule 50 (Assign -> Inc Lhs .)
    GT              reduce using rule 50 (Assign -> Inc Lhs .)
    GTEQ            reduce using rule 50 (Assign -> Inc Lhs .)
    LTEQ            reduce using rule 50 (Assign -> Inc Lhs .)
    NEQ             reduce using rule 50 (Assign -> Inc Lhs .)
    LAND            reduce using rule 50 (Assign -> Inc Lhs .)
    LOR             reduce using rule 50 (Assign -> Inc Lhs .)
    MOD             reduce using rule 50 (Assign -> Inc Lhs .)
    SEMICOLON       reduce using rule 50 (Assign -> Inc Lhs .)
    DO              reduce using rule 50 (Assign -> Inc Lhs .)
    RPAREN          reduce using rule 50 (Assign -> Inc Lhs .)
    THEN            reduce using rule 50 (Assign -> Inc Lhs .)
    COMMA           reduce using rule 50 (Assign -> Inc Lhs .)
    RSQR            reduce using rule 50 (Assign -> Inc Lhs .)


state 130

    (37) Stmt -> SE SEMICOLON .

    CLASS           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    INT             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    BOOL            reduce using rule 37 (Stmt -> SE SEMICOLON .)
    VOID            reduce using rule 37 (Stmt -> SE SEMICOLON .)
    animal          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    dog             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    $end            reduce using rule 37 (Stmt -> SE SEMICOLON .)
    RCURLY          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    WHILE           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    PRINT           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    LCURLY          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    IF              reduce using rule 37 (Stmt -> SE SEMICOLON .)
    FOR             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    DO              reduce using rule 37 (Stmt -> SE SEMICOLON .)
    RETURN          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    INC             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    DEC             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    IDENTIFIER      reduce using rule 37 (Stmt -> SE SEMICOLON .)
    LPAREN          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    NUMBER          reduce using rule 37 (Stmt -> SE SEMICOLON .)
    TRUE            reduce using rule 37 (Stmt -> SE SEMICOLON .)
    FALSE           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    THIS            reduce using rule 37 (Stmt -> SE SEMICOLON .)
    SUPER           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    INPUT           reduce using rule 37 (Stmt -> SE SEMICOLON .)
    NEW             reduce using rule 37 (Stmt -> SE SEMICOLON .)
    ELSE            reduce using rule 37 (Stmt -> SE SEMICOLON .)


state 131

    (33) Formals -> Type Var COMMA Formals .

    RPAREN          reduce using rule 33 (Formals -> Type Var COMMA Formals .)


state 132

    (65) Return -> RETURN AEQ SEMICOLON .

    CLASS           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    INT             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    BOOL            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    VOID            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    animal          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    dog             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    $end            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    RCURLY          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    WHILE           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    PRINT           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    LCURLY          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    IF              reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    FOR             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    DO              reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    RETURN          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    INC             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    DEC             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    IDENTIFIER      reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    LPAREN          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    NUMBER          reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    TRUE            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    FALSE           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    THIS            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    SUPER           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    INPUT           reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    NEW             reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)
    ELSE            reduce using rule 65 (Return -> RETURN AEQ SEMICOLON .)


state 133

    (81) AE -> MINUS AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 81 (AE -> MINUS AE .)
    TIMES           reduce using rule 81 (AE -> MINUS AE .)
    SLASH           reduce using rule 81 (AE -> MINUS AE .)
    PLUS            reduce using rule 81 (AE -> MINUS AE .)
    MINUS           reduce using rule 81 (AE -> MINUS AE .)
    LT              reduce using rule 81 (AE -> MINUS AE .)
    EQ              reduce using rule 81 (AE -> MINUS AE .)
    GT              reduce using rule 81 (AE -> MINUS AE .)
    GTEQ            reduce using rule 81 (AE -> MINUS AE .)
    LTEQ            reduce using rule 81 (AE -> MINUS AE .)
    NEQ             reduce using rule 81 (AE -> MINUS AE .)
    LAND            reduce using rule 81 (AE -> MINUS AE .)
    LOR             reduce using rule 81 (AE -> MINUS AE .)
    MOD             reduce using rule 81 (AE -> MINUS AE .)
    SEMICOLON       reduce using rule 81 (AE -> MINUS AE .)
    DO              reduce using rule 81 (AE -> MINUS AE .)
    RPAREN          reduce using rule 81 (AE -> MINUS AE .)
    THEN            reduce using rule 81 (AE -> MINUS AE .)
    COMMA           reduce using rule 81 (AE -> MINUS AE .)

  ! TIMES           [ shift and go to state 140 ]
  ! SLASH           [ shift and go to state 145 ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]
  ! MOD             [ shift and go to state 146 ]


state 134

    (110) NewObject -> NEW animal . LPAREN RPAREN
    (28) Type -> animal .

    LPAREN          shift and go to state 159
    LSQR            reduce using rule 28 (Type -> animal .)


state 135

    (112) NewArray -> NEW Type . DimExpr Dimstar
    (27) Type -> Type . LSQR RSQR
    (113) DimExpr -> . LSQR AE RSQR

    LSQR            shift and go to state 173

    DimExpr                        shift and go to state 174

state 136

    (111) NewObject -> NEW dog . LPAREN RPAREN
    (29) Type -> dog .

    LPAREN          shift and go to state 160
    LSQR            reduce using rule 29 (Type -> dog .)


state 137

    (74) AE -> AE GT . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 175
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 138

    (75) AE -> AE GTEQ . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 176
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 139

    (76) AE -> AE LTEQ . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 177
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 140

    (68) AE -> AE TIMES . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 178
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 141

    (79) AE -> AE LOR . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 179
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 142

    (72) AE -> AE LT . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 180
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 143

    (78) AE -> AE LAND . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 181
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 144

    (70) AE -> AE PLUS . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 182
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 145

    (69) AE -> AE SLASH . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 183
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 146

    (80) AE -> AE MOD . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 184
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 147

    (73) AE -> AE EQ . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 185
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 148

    (71) AE -> AE MINUS . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 186
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 149

    (77) AE -> AE NEQ . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 187
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 150

    (82) AE -> NOT AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 82 (AE -> NOT AE .)
    TIMES           reduce using rule 82 (AE -> NOT AE .)
    SLASH           reduce using rule 82 (AE -> NOT AE .)
    PLUS            reduce using rule 82 (AE -> NOT AE .)
    MINUS           reduce using rule 82 (AE -> NOT AE .)
    LT              reduce using rule 82 (AE -> NOT AE .)
    EQ              reduce using rule 82 (AE -> NOT AE .)
    GT              reduce using rule 82 (AE -> NOT AE .)
    GTEQ            reduce using rule 82 (AE -> NOT AE .)
    LTEQ            reduce using rule 82 (AE -> NOT AE .)
    NEQ             reduce using rule 82 (AE -> NOT AE .)
    LAND            reduce using rule 82 (AE -> NOT AE .)
    LOR             reduce using rule 82 (AE -> NOT AE .)
    MOD             reduce using rule 82 (AE -> NOT AE .)
    SEMICOLON       reduce using rule 82 (AE -> NOT AE .)
    DO              reduce using rule 82 (AE -> NOT AE .)
    RPAREN          reduce using rule 82 (AE -> NOT AE .)
    THEN            reduce using rule 82 (AE -> NOT AE .)
    COMMA           reduce using rule 82 (AE -> NOT AE .)

  ! TIMES           [ shift and go to state 140 ]
  ! SLASH           [ shift and go to state 145 ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]
  ! MOD             [ shift and go to state 146 ]


state 151

    (59) Do_while -> DO Stmt WHILE . AE SEMICOLON
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 188
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 152

    (54) Print -> PRINT LPAREN AE . RPAREN SEMICOLON
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RPAREN          shift and go to state 189
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 153

    (36) Stmtstar -> Stmt . Stmtstar
    (35) Stmtstar -> . empty
    (36) Stmtstar -> . Stmt Stmtstar
    (4) empty -> .
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    RCURLY          reduce using rule 4 (empty -> .)
    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 153
    Stmtstar                       shift and go to state 190
    empty                          shift and go to state 155
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 154

    (55) Block -> LCURLY VarDeclstar Stmtstar . RCURLY

    RCURLY          shift and go to state 191


state 155

    (35) Stmtstar -> empty .

    RCURLY          reduce using rule 35 (Stmtstar -> empty .)


state 156

    (23) VarDeclstar -> VarDecl VarDeclstar .

    PRINT           reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    LCURLY          reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    IF              reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    WHILE           reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    FOR             reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    DO              reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    RETURN          reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    INC             reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    DEC             reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    IDENTIFIER      reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    LPAREN          reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    NUMBER          reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    TRUE            reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    FALSE           reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    THIS            reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    SUPER           reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    INPUT           reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    NEW             reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)
    RCURLY          reduce using rule 23 (VarDeclstar -> VarDecl VarDeclstar .)


state 157

    (58) While -> WHILE AE DO . Stmt
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 192
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 158

    (101) Input -> INPUT LPAREN RPAREN .

    DOT             reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    LSQR            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    TIMES           reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    SLASH           reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    PLUS            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    MINUS           reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    LT              reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    EQ              reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    GT              reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    GTEQ            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    LTEQ            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    NEQ             reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    LAND            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    LOR             reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    MOD             reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    SEMICOLON       reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    DO              reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    THEN            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    COMMA           reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)
    RSQR            reduce using rule 101 (Input -> INPUT LPAREN RPAREN .)


state 159

    (110) NewObject -> NEW animal LPAREN . RPAREN

    RPAREN          shift and go to state 193


state 160

    (111) NewObject -> NEW dog LPAREN . RPAREN

    RPAREN          shift and go to state 194


state 161

    (60) for -> FOR LPAREN SEQ . SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt

    SEMICOLON       shift and go to state 195


state 162

    (61) SEQ -> empty .

    RPAREN          reduce using rule 61 (SEQ -> empty .)
    SEMICOLON       reduce using rule 61 (SEQ -> empty .)


state 163

    (62) SEQ -> SE .

    RPAREN          reduce using rule 62 (SEQ -> SE .)
    SEMICOLON       reduce using rule 62 (SEQ -> SE .)


state 164

    (47) Assign -> Lhs EQUALS AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    SEMICOLON       reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    DO              reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    RPAREN          reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    THEN            reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    COMMA           reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    RSQR            reduce using rule 47 (Assign -> Lhs EQUALS AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! SLASH           [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! PLUS            [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! MINUS           [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! LT              [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! EQ              [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! GT              [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! GTEQ            [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! LTEQ            [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! NEQ             [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! LAND            [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! LOR             [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]
  ! MOD             [ reduce using rule 47 (Assign -> Lhs EQUALS AE .) ]


state 165

    (92) Primary -> LPAREN AE RPAREN .

    DOT             reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    LSQR            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    COMMA           reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    TIMES           reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    SLASH           reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    PLUS            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    MINUS           reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    LT              reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    EQ              reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    GT              reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    GTEQ            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    LTEQ            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    NEQ             reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    LAND            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    LOR             reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    MOD             reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    RPAREN          reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    SEMICOLON       reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    DO              reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    THEN            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)
    RSQR            reduce using rule 92 (Primary -> LPAREN AE RPAREN .)


state 166

    (56) If -> IF AE THEN . Stmt
    (57) If -> IF AE THEN . Stmt ELSE Stmt
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 196
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 167

    (105) MethodCall -> FieldAccess LPAREN ArgsQ . RPAREN

    RPAREN          shift and go to state 197


state 168

    (107) ArgsQ -> Args .

    RPAREN          reduce using rule 107 (ArgsQ -> Args .)


state 169

    (106) ArgsQ -> empty .

    RPAREN          reduce using rule 106 (ArgsQ -> empty .)


state 170

    (108) Args -> AE . COMMA Args
    (109) Args -> AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    COMMA           shift and go to state 198
    RPAREN          reduce using rule 109 (Args -> AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 171

    (102) ArrayAccess -> Primary LSQR AE . RSQR
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            shift and go to state 199
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 172

    (103) FieldAccess -> Primary DOT IDENTIFIER .

    LPAREN          reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    DOT             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    LSQR            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    THEN            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    TIMES           reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    SLASH           reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    PLUS            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    MINUS           reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    LT              reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    EQ              reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    GT              reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    GTEQ            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    LTEQ            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    NEQ             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    LAND            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    LOR             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    MOD             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    EQUALS          reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    INC             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    DEC             reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    DO              reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    RPAREN          reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    COMMA           reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)
    RSQR            reduce using rule 103 (FieldAccess -> Primary DOT IDENTIFIER .)


state 173

    (27) Type -> Type LSQR . RSQR
    (113) DimExpr -> LSQR . AE RSQR
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    RSQR            shift and go to state 24
    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    NewArray                       shift and go to state 100
    AE                             shift and go to state 200
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 174

    (112) NewArray -> NEW Type DimExpr . Dimstar
    (114) Dimstar -> . empty
    (115) Dimstar -> . Dim Dimstar
    (4) empty -> .
    (116) Dim -> . LSQR RSQR

    TIMES           reduce using rule 4 (empty -> .)
    SLASH           reduce using rule 4 (empty -> .)
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    LT              reduce using rule 4 (empty -> .)
    EQ              reduce using rule 4 (empty -> .)
    GT              reduce using rule 4 (empty -> .)
    GTEQ            reduce using rule 4 (empty -> .)
    LTEQ            reduce using rule 4 (empty -> .)
    NEQ             reduce using rule 4 (empty -> .)
    LAND            reduce using rule 4 (empty -> .)
    LOR             reduce using rule 4 (empty -> .)
    MOD             reduce using rule 4 (empty -> .)
    SEMICOLON       reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    THEN            reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    RSQR            reduce using rule 4 (empty -> .)
    LSQR            shift and go to state 28

    Dimstar                        shift and go to state 201
    empty                          shift and go to state 30
    Dim                            shift and go to state 27

state 175

    (74) AE -> AE GT AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 74 (AE -> AE GT AE .)
    LT              reduce using rule 74 (AE -> AE GT AE .)
    EQ              reduce using rule 74 (AE -> AE GT AE .)
    GT              reduce using rule 74 (AE -> AE GT AE .)
    GTEQ            reduce using rule 74 (AE -> AE GT AE .)
    LTEQ            reduce using rule 74 (AE -> AE GT AE .)
    NEQ             reduce using rule 74 (AE -> AE GT AE .)
    LAND            reduce using rule 74 (AE -> AE GT AE .)
    LOR             reduce using rule 74 (AE -> AE GT AE .)
    SEMICOLON       reduce using rule 74 (AE -> AE GT AE .)
    DO              reduce using rule 74 (AE -> AE GT AE .)
    RPAREN          reduce using rule 74 (AE -> AE GT AE .)
    THEN            reduce using rule 74 (AE -> AE GT AE .)
    COMMA           reduce using rule 74 (AE -> AE GT AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 74 (AE -> AE GT AE .) ]
  ! SLASH           [ reduce using rule 74 (AE -> AE GT AE .) ]
  ! PLUS            [ reduce using rule 74 (AE -> AE GT AE .) ]
  ! MINUS           [ reduce using rule 74 (AE -> AE GT AE .) ]
  ! MOD             [ reduce using rule 74 (AE -> AE GT AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 176

    (75) AE -> AE GTEQ AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 75 (AE -> AE GTEQ AE .)
    LT              reduce using rule 75 (AE -> AE GTEQ AE .)
    EQ              reduce using rule 75 (AE -> AE GTEQ AE .)
    GT              reduce using rule 75 (AE -> AE GTEQ AE .)
    GTEQ            reduce using rule 75 (AE -> AE GTEQ AE .)
    LTEQ            reduce using rule 75 (AE -> AE GTEQ AE .)
    NEQ             reduce using rule 75 (AE -> AE GTEQ AE .)
    LAND            reduce using rule 75 (AE -> AE GTEQ AE .)
    LOR             reduce using rule 75 (AE -> AE GTEQ AE .)
    SEMICOLON       reduce using rule 75 (AE -> AE GTEQ AE .)
    DO              reduce using rule 75 (AE -> AE GTEQ AE .)
    RPAREN          reduce using rule 75 (AE -> AE GTEQ AE .)
    THEN            reduce using rule 75 (AE -> AE GTEQ AE .)
    COMMA           reduce using rule 75 (AE -> AE GTEQ AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 75 (AE -> AE GTEQ AE .) ]
  ! SLASH           [ reduce using rule 75 (AE -> AE GTEQ AE .) ]
  ! PLUS            [ reduce using rule 75 (AE -> AE GTEQ AE .) ]
  ! MINUS           [ reduce using rule 75 (AE -> AE GTEQ AE .) ]
  ! MOD             [ reduce using rule 75 (AE -> AE GTEQ AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 177

    (76) AE -> AE LTEQ AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 76 (AE -> AE LTEQ AE .)
    LT              reduce using rule 76 (AE -> AE LTEQ AE .)
    EQ              reduce using rule 76 (AE -> AE LTEQ AE .)
    GT              reduce using rule 76 (AE -> AE LTEQ AE .)
    GTEQ            reduce using rule 76 (AE -> AE LTEQ AE .)
    LTEQ            reduce using rule 76 (AE -> AE LTEQ AE .)
    NEQ             reduce using rule 76 (AE -> AE LTEQ AE .)
    LAND            reduce using rule 76 (AE -> AE LTEQ AE .)
    LOR             reduce using rule 76 (AE -> AE LTEQ AE .)
    SEMICOLON       reduce using rule 76 (AE -> AE LTEQ AE .)
    DO              reduce using rule 76 (AE -> AE LTEQ AE .)
    RPAREN          reduce using rule 76 (AE -> AE LTEQ AE .)
    THEN            reduce using rule 76 (AE -> AE LTEQ AE .)
    COMMA           reduce using rule 76 (AE -> AE LTEQ AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 76 (AE -> AE LTEQ AE .) ]
  ! SLASH           [ reduce using rule 76 (AE -> AE LTEQ AE .) ]
  ! PLUS            [ reduce using rule 76 (AE -> AE LTEQ AE .) ]
  ! MINUS           [ reduce using rule 76 (AE -> AE LTEQ AE .) ]
  ! MOD             [ reduce using rule 76 (AE -> AE LTEQ AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 178

    (68) AE -> AE TIMES AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 68 (AE -> AE TIMES AE .)
    TIMES           reduce using rule 68 (AE -> AE TIMES AE .)
    SLASH           reduce using rule 68 (AE -> AE TIMES AE .)
    PLUS            reduce using rule 68 (AE -> AE TIMES AE .)
    MINUS           reduce using rule 68 (AE -> AE TIMES AE .)
    LT              reduce using rule 68 (AE -> AE TIMES AE .)
    EQ              reduce using rule 68 (AE -> AE TIMES AE .)
    GT              reduce using rule 68 (AE -> AE TIMES AE .)
    GTEQ            reduce using rule 68 (AE -> AE TIMES AE .)
    LTEQ            reduce using rule 68 (AE -> AE TIMES AE .)
    NEQ             reduce using rule 68 (AE -> AE TIMES AE .)
    LAND            reduce using rule 68 (AE -> AE TIMES AE .)
    LOR             reduce using rule 68 (AE -> AE TIMES AE .)
    MOD             reduce using rule 68 (AE -> AE TIMES AE .)
    SEMICOLON       reduce using rule 68 (AE -> AE TIMES AE .)
    DO              reduce using rule 68 (AE -> AE TIMES AE .)
    RPAREN          reduce using rule 68 (AE -> AE TIMES AE .)
    THEN            reduce using rule 68 (AE -> AE TIMES AE .)
    COMMA           reduce using rule 68 (AE -> AE TIMES AE .)

  ! TIMES           [ shift and go to state 140 ]
  ! SLASH           [ shift and go to state 145 ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]
  ! MOD             [ shift and go to state 146 ]


state 179

    (79) AE -> AE LOR AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 79 (AE -> AE LOR AE .)
    LOR             reduce using rule 79 (AE -> AE LOR AE .)
    SEMICOLON       reduce using rule 79 (AE -> AE LOR AE .)
    DO              reduce using rule 79 (AE -> AE LOR AE .)
    RPAREN          reduce using rule 79 (AE -> AE LOR AE .)
    THEN            reduce using rule 79 (AE -> AE LOR AE .)
    COMMA           reduce using rule 79 (AE -> AE LOR AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! SLASH           [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! PLUS            [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! MINUS           [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! LT              [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! EQ              [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! GT              [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! GTEQ            [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! LTEQ            [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! NEQ             [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! LAND            [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! MOD             [ reduce using rule 79 (AE -> AE LOR AE .) ]
  ! LOR             [ shift and go to state 141 ]


state 180

    (72) AE -> AE LT AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 72 (AE -> AE LT AE .)
    LT              reduce using rule 72 (AE -> AE LT AE .)
    EQ              reduce using rule 72 (AE -> AE LT AE .)
    GT              reduce using rule 72 (AE -> AE LT AE .)
    GTEQ            reduce using rule 72 (AE -> AE LT AE .)
    LTEQ            reduce using rule 72 (AE -> AE LT AE .)
    NEQ             reduce using rule 72 (AE -> AE LT AE .)
    LAND            reduce using rule 72 (AE -> AE LT AE .)
    LOR             reduce using rule 72 (AE -> AE LT AE .)
    SEMICOLON       reduce using rule 72 (AE -> AE LT AE .)
    DO              reduce using rule 72 (AE -> AE LT AE .)
    RPAREN          reduce using rule 72 (AE -> AE LT AE .)
    THEN            reduce using rule 72 (AE -> AE LT AE .)
    COMMA           reduce using rule 72 (AE -> AE LT AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 72 (AE -> AE LT AE .) ]
  ! SLASH           [ reduce using rule 72 (AE -> AE LT AE .) ]
  ! PLUS            [ reduce using rule 72 (AE -> AE LT AE .) ]
  ! MINUS           [ reduce using rule 72 (AE -> AE LT AE .) ]
  ! MOD             [ reduce using rule 72 (AE -> AE LT AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 181

    (78) AE -> AE LAND AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 78 (AE -> AE LAND AE .)
    LAND            reduce using rule 78 (AE -> AE LAND AE .)
    LOR             reduce using rule 78 (AE -> AE LAND AE .)
    SEMICOLON       reduce using rule 78 (AE -> AE LAND AE .)
    DO              reduce using rule 78 (AE -> AE LAND AE .)
    RPAREN          reduce using rule 78 (AE -> AE LAND AE .)
    THEN            reduce using rule 78 (AE -> AE LAND AE .)
    COMMA           reduce using rule 78 (AE -> AE LAND AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! SLASH           [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! PLUS            [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! MINUS           [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! LT              [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! EQ              [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! GT              [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! GTEQ            [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! LTEQ            [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! NEQ             [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! MOD             [ reduce using rule 78 (AE -> AE LAND AE .) ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 182

    (70) AE -> AE PLUS AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 70 (AE -> AE PLUS AE .)
    PLUS            reduce using rule 70 (AE -> AE PLUS AE .)
    MINUS           reduce using rule 70 (AE -> AE PLUS AE .)
    LT              reduce using rule 70 (AE -> AE PLUS AE .)
    EQ              reduce using rule 70 (AE -> AE PLUS AE .)
    GT              reduce using rule 70 (AE -> AE PLUS AE .)
    GTEQ            reduce using rule 70 (AE -> AE PLUS AE .)
    LTEQ            reduce using rule 70 (AE -> AE PLUS AE .)
    NEQ             reduce using rule 70 (AE -> AE PLUS AE .)
    LAND            reduce using rule 70 (AE -> AE PLUS AE .)
    LOR             reduce using rule 70 (AE -> AE PLUS AE .)
    SEMICOLON       reduce using rule 70 (AE -> AE PLUS AE .)
    DO              reduce using rule 70 (AE -> AE PLUS AE .)
    RPAREN          reduce using rule 70 (AE -> AE PLUS AE .)
    THEN            reduce using rule 70 (AE -> AE PLUS AE .)
    COMMA           reduce using rule 70 (AE -> AE PLUS AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 70 (AE -> AE PLUS AE .) ]
  ! SLASH           [ reduce using rule 70 (AE -> AE PLUS AE .) ]
  ! MOD             [ reduce using rule 70 (AE -> AE PLUS AE .) ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 183

    (69) AE -> AE SLASH AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 69 (AE -> AE SLASH AE .)
    TIMES           reduce using rule 69 (AE -> AE SLASH AE .)
    SLASH           reduce using rule 69 (AE -> AE SLASH AE .)
    PLUS            reduce using rule 69 (AE -> AE SLASH AE .)
    MINUS           reduce using rule 69 (AE -> AE SLASH AE .)
    LT              reduce using rule 69 (AE -> AE SLASH AE .)
    EQ              reduce using rule 69 (AE -> AE SLASH AE .)
    GT              reduce using rule 69 (AE -> AE SLASH AE .)
    GTEQ            reduce using rule 69 (AE -> AE SLASH AE .)
    LTEQ            reduce using rule 69 (AE -> AE SLASH AE .)
    NEQ             reduce using rule 69 (AE -> AE SLASH AE .)
    LAND            reduce using rule 69 (AE -> AE SLASH AE .)
    LOR             reduce using rule 69 (AE -> AE SLASH AE .)
    MOD             reduce using rule 69 (AE -> AE SLASH AE .)
    SEMICOLON       reduce using rule 69 (AE -> AE SLASH AE .)
    DO              reduce using rule 69 (AE -> AE SLASH AE .)
    RPAREN          reduce using rule 69 (AE -> AE SLASH AE .)
    THEN            reduce using rule 69 (AE -> AE SLASH AE .)
    COMMA           reduce using rule 69 (AE -> AE SLASH AE .)

  ! TIMES           [ shift and go to state 140 ]
  ! SLASH           [ shift and go to state 145 ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]
  ! MOD             [ shift and go to state 146 ]


state 184

    (80) AE -> AE MOD AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 80 (AE -> AE MOD AE .)
    TIMES           reduce using rule 80 (AE -> AE MOD AE .)
    SLASH           reduce using rule 80 (AE -> AE MOD AE .)
    PLUS            reduce using rule 80 (AE -> AE MOD AE .)
    MINUS           reduce using rule 80 (AE -> AE MOD AE .)
    LT              reduce using rule 80 (AE -> AE MOD AE .)
    EQ              reduce using rule 80 (AE -> AE MOD AE .)
    GT              reduce using rule 80 (AE -> AE MOD AE .)
    GTEQ            reduce using rule 80 (AE -> AE MOD AE .)
    LTEQ            reduce using rule 80 (AE -> AE MOD AE .)
    NEQ             reduce using rule 80 (AE -> AE MOD AE .)
    LAND            reduce using rule 80 (AE -> AE MOD AE .)
    LOR             reduce using rule 80 (AE -> AE MOD AE .)
    MOD             reduce using rule 80 (AE -> AE MOD AE .)
    SEMICOLON       reduce using rule 80 (AE -> AE MOD AE .)
    DO              reduce using rule 80 (AE -> AE MOD AE .)
    RPAREN          reduce using rule 80 (AE -> AE MOD AE .)
    THEN            reduce using rule 80 (AE -> AE MOD AE .)
    COMMA           reduce using rule 80 (AE -> AE MOD AE .)

  ! TIMES           [ shift and go to state 140 ]
  ! SLASH           [ shift and go to state 145 ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]
  ! MOD             [ shift and go to state 146 ]


state 185

    (73) AE -> AE EQ AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 73 (AE -> AE EQ AE .)
    LT              reduce using rule 73 (AE -> AE EQ AE .)
    EQ              reduce using rule 73 (AE -> AE EQ AE .)
    GT              reduce using rule 73 (AE -> AE EQ AE .)
    GTEQ            reduce using rule 73 (AE -> AE EQ AE .)
    LTEQ            reduce using rule 73 (AE -> AE EQ AE .)
    NEQ             reduce using rule 73 (AE -> AE EQ AE .)
    LAND            reduce using rule 73 (AE -> AE EQ AE .)
    LOR             reduce using rule 73 (AE -> AE EQ AE .)
    SEMICOLON       reduce using rule 73 (AE -> AE EQ AE .)
    DO              reduce using rule 73 (AE -> AE EQ AE .)
    RPAREN          reduce using rule 73 (AE -> AE EQ AE .)
    THEN            reduce using rule 73 (AE -> AE EQ AE .)
    COMMA           reduce using rule 73 (AE -> AE EQ AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 73 (AE -> AE EQ AE .) ]
  ! SLASH           [ reduce using rule 73 (AE -> AE EQ AE .) ]
  ! PLUS            [ reduce using rule 73 (AE -> AE EQ AE .) ]
  ! MINUS           [ reduce using rule 73 (AE -> AE EQ AE .) ]
  ! MOD             [ reduce using rule 73 (AE -> AE EQ AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 186

    (71) AE -> AE MINUS AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 71 (AE -> AE MINUS AE .)
    PLUS            reduce using rule 71 (AE -> AE MINUS AE .)
    MINUS           reduce using rule 71 (AE -> AE MINUS AE .)
    LT              reduce using rule 71 (AE -> AE MINUS AE .)
    EQ              reduce using rule 71 (AE -> AE MINUS AE .)
    GT              reduce using rule 71 (AE -> AE MINUS AE .)
    GTEQ            reduce using rule 71 (AE -> AE MINUS AE .)
    LTEQ            reduce using rule 71 (AE -> AE MINUS AE .)
    NEQ             reduce using rule 71 (AE -> AE MINUS AE .)
    LAND            reduce using rule 71 (AE -> AE MINUS AE .)
    LOR             reduce using rule 71 (AE -> AE MINUS AE .)
    SEMICOLON       reduce using rule 71 (AE -> AE MINUS AE .)
    DO              reduce using rule 71 (AE -> AE MINUS AE .)
    RPAREN          reduce using rule 71 (AE -> AE MINUS AE .)
    THEN            reduce using rule 71 (AE -> AE MINUS AE .)
    COMMA           reduce using rule 71 (AE -> AE MINUS AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 71 (AE -> AE MINUS AE .) ]
  ! SLASH           [ reduce using rule 71 (AE -> AE MINUS AE .) ]
  ! MOD             [ reduce using rule 71 (AE -> AE MINUS AE .) ]
  ! PLUS            [ shift and go to state 144 ]
  ! MINUS           [ shift and go to state 148 ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 187

    (77) AE -> AE NEQ AE .
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            reduce using rule 77 (AE -> AE NEQ AE .)
    LT              reduce using rule 77 (AE -> AE NEQ AE .)
    EQ              reduce using rule 77 (AE -> AE NEQ AE .)
    GT              reduce using rule 77 (AE -> AE NEQ AE .)
    GTEQ            reduce using rule 77 (AE -> AE NEQ AE .)
    LTEQ            reduce using rule 77 (AE -> AE NEQ AE .)
    NEQ             reduce using rule 77 (AE -> AE NEQ AE .)
    LAND            reduce using rule 77 (AE -> AE NEQ AE .)
    LOR             reduce using rule 77 (AE -> AE NEQ AE .)
    SEMICOLON       reduce using rule 77 (AE -> AE NEQ AE .)
    DO              reduce using rule 77 (AE -> AE NEQ AE .)
    RPAREN          reduce using rule 77 (AE -> AE NEQ AE .)
    THEN            reduce using rule 77 (AE -> AE NEQ AE .)
    COMMA           reduce using rule 77 (AE -> AE NEQ AE .)
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    MOD             shift and go to state 146

  ! TIMES           [ reduce using rule 77 (AE -> AE NEQ AE .) ]
  ! SLASH           [ reduce using rule 77 (AE -> AE NEQ AE .) ]
  ! PLUS            [ reduce using rule 77 (AE -> AE NEQ AE .) ]
  ! MINUS           [ reduce using rule 77 (AE -> AE NEQ AE .) ]
  ! MOD             [ reduce using rule 77 (AE -> AE NEQ AE .) ]
  ! LT              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 147 ]
  ! GT              [ shift and go to state 137 ]
  ! GTEQ            [ shift and go to state 138 ]
  ! LTEQ            [ shift and go to state 139 ]
  ! NEQ             [ shift and go to state 149 ]
  ! LAND            [ shift and go to state 143 ]
  ! LOR             [ shift and go to state 141 ]


state 188

    (59) Do_while -> DO Stmt WHILE AE . SEMICOLON
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    SEMICOLON       shift and go to state 202
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 189

    (54) Print -> PRINT LPAREN AE RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 203


state 190

    (36) Stmtstar -> Stmt Stmtstar .

    RCURLY          reduce using rule 36 (Stmtstar -> Stmt Stmtstar .)


state 191

    (55) Block -> LCURLY VarDeclstar Stmtstar RCURLY .

    CLASS           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    INT             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    BOOL            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    VOID            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    animal          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    dog             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    $end            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    RCURLY          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    WHILE           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    PRINT           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    LCURLY          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    IF              reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    FOR             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    DO              reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    RETURN          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    INC             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    DEC             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    IDENTIFIER      reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    LPAREN          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    NUMBER          reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    TRUE            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    FALSE           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    THIS            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    SUPER           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    INPUT           reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    NEW             reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)
    ELSE            reduce using rule 55 (Block -> LCURLY VarDeclstar Stmtstar RCURLY .)


state 192

    (58) While -> WHILE AE DO Stmt .

    PRINT           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    LCURLY          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    IF              reduce using rule 58 (While -> WHILE AE DO Stmt .)
    WHILE           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    FOR             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    DO              reduce using rule 58 (While -> WHILE AE DO Stmt .)
    RETURN          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    INC             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    DEC             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    IDENTIFIER      reduce using rule 58 (While -> WHILE AE DO Stmt .)
    LPAREN          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    NUMBER          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    TRUE            reduce using rule 58 (While -> WHILE AE DO Stmt .)
    FALSE           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    THIS            reduce using rule 58 (While -> WHILE AE DO Stmt .)
    SUPER           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    INPUT           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    NEW             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    RCURLY          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    CLASS           reduce using rule 58 (While -> WHILE AE DO Stmt .)
    INT             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    BOOL            reduce using rule 58 (While -> WHILE AE DO Stmt .)
    VOID            reduce using rule 58 (While -> WHILE AE DO Stmt .)
    animal          reduce using rule 58 (While -> WHILE AE DO Stmt .)
    dog             reduce using rule 58 (While -> WHILE AE DO Stmt .)
    $end            reduce using rule 58 (While -> WHILE AE DO Stmt .)
    ELSE            reduce using rule 58 (While -> WHILE AE DO Stmt .)


state 193

    (110) NewObject -> NEW animal LPAREN RPAREN .

    DOT             reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    LSQR            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    RSQR            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    TIMES           reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    SLASH           reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    PLUS            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    MINUS           reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    LT              reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    EQ              reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    GT              reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    GTEQ            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    LTEQ            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    NEQ             reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    LAND            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    LOR             reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    MOD             reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    SEMICOLON       reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    DO              reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    RPAREN          reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    THEN            reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)
    COMMA           reduce using rule 110 (NewObject -> NEW animal LPAREN RPAREN .)


state 194

    (111) NewObject -> NEW dog LPAREN RPAREN .

    DOT             reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    LSQR            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    RSQR            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    TIMES           reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    SLASH           reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    PLUS            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    MINUS           reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    LT              reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    EQ              reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    GT              reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    GTEQ            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    LTEQ            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    NEQ             reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    LAND            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    LOR             reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    MOD             reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    SEMICOLON       reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    DO              reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    RPAREN          reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    THEN            reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)
    COMMA           reduce using rule 111 (NewObject -> NEW dog LPAREN RPAREN .)


state 195

    (60) for -> FOR LPAREN SEQ SEMICOLON . AEQ SEMICOLON SEQ RPAREN Stmt
    (63) AEQ -> . empty
    (64) AEQ -> . AE
    (4) empty -> .
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    SEMICOLON       reduce using rule 4 (empty -> .)
    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    AEQ                            shift and go to state 204
    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    NewArray                       shift and go to state 100
    empty                          shift and go to state 101
    AE                             shift and go to state 102
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    super                          shift and go to state 66
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 196

    (56) If -> IF AE THEN Stmt .
    (57) If -> IF AE THEN Stmt . ELSE Stmt

  ! shift/reduce conflict for ELSE resolved as shift
    CLASS           reduce using rule 56 (If -> IF AE THEN Stmt .)
    INT             reduce using rule 56 (If -> IF AE THEN Stmt .)
    BOOL            reduce using rule 56 (If -> IF AE THEN Stmt .)
    VOID            reduce using rule 56 (If -> IF AE THEN Stmt .)
    animal          reduce using rule 56 (If -> IF AE THEN Stmt .)
    dog             reduce using rule 56 (If -> IF AE THEN Stmt .)
    $end            reduce using rule 56 (If -> IF AE THEN Stmt .)
    RCURLY          reduce using rule 56 (If -> IF AE THEN Stmt .)
    WHILE           reduce using rule 56 (If -> IF AE THEN Stmt .)
    PRINT           reduce using rule 56 (If -> IF AE THEN Stmt .)
    LCURLY          reduce using rule 56 (If -> IF AE THEN Stmt .)
    IF              reduce using rule 56 (If -> IF AE THEN Stmt .)
    FOR             reduce using rule 56 (If -> IF AE THEN Stmt .)
    DO              reduce using rule 56 (If -> IF AE THEN Stmt .)
    RETURN          reduce using rule 56 (If -> IF AE THEN Stmt .)
    INC             reduce using rule 56 (If -> IF AE THEN Stmt .)
    DEC             reduce using rule 56 (If -> IF AE THEN Stmt .)
    IDENTIFIER      reduce using rule 56 (If -> IF AE THEN Stmt .)
    LPAREN          reduce using rule 56 (If -> IF AE THEN Stmt .)
    NUMBER          reduce using rule 56 (If -> IF AE THEN Stmt .)
    TRUE            reduce using rule 56 (If -> IF AE THEN Stmt .)
    FALSE           reduce using rule 56 (If -> IF AE THEN Stmt .)
    THIS            reduce using rule 56 (If -> IF AE THEN Stmt .)
    SUPER           reduce using rule 56 (If -> IF AE THEN Stmt .)
    INPUT           reduce using rule 56 (If -> IF AE THEN Stmt .)
    NEW             reduce using rule 56 (If -> IF AE THEN Stmt .)
    ELSE            shift and go to state 205

  ! ELSE            [ reduce using rule 56 (If -> IF AE THEN Stmt .) ]


state 197

    (105) MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .

    TIMES           reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    SLASH           reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    PLUS            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    MINUS           reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    LT              reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    EQ              reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    GT              reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    GTEQ            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    LTEQ            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    NEQ             reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    LAND            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    LOR             reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    MOD             reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    SEMICOLON       reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    DO              reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    RPAREN          reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    THEN            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    COMMA           reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)
    RSQR            reduce using rule 105 (MethodCall -> FieldAccess LPAREN ArgsQ RPAREN .)


state 198

    (108) Args -> AE COMMA . Args
    (108) Args -> . AE COMMA Args
    (109) Args -> . AE
    (68) AE -> . AE TIMES AE
    (69) AE -> . AE SLASH AE
    (70) AE -> . AE PLUS AE
    (71) AE -> . AE MINUS AE
    (72) AE -> . AE LT AE
    (73) AE -> . AE EQ AE
    (74) AE -> . AE GT AE
    (75) AE -> . AE GTEQ AE
    (76) AE -> . AE LTEQ AE
    (77) AE -> . AE NEQ AE
    (78) AE -> . AE LAND AE
    (79) AE -> . AE LOR AE
    (80) AE -> . AE MOD AE
    (81) AE -> . MINUS AE
    (82) AE -> . NOT AE
    (83) AE -> . Primary
    (84) AE -> . SE
    (85) AE -> . NewArray
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (112) NewArray -> . NEW Type DimExpr Dimstar
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC

    MINUS           shift and go to state 98
    NOT             shift and go to state 106
    LPAREN          shift and go to state 74
    NEW             shift and go to state 99
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    IDENTIFIER      shift and go to state 69
    INC             shift and go to state 68
    DEC             shift and go to state 62

    false                          shift and go to state 71
    true                           shift and go to state 79
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    super                          shift and go to state 66
    Args                           shift and go to state 206
    NewArray                       shift and go to state 100
    AE                             shift and go to state 170
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 103
    Dec                            shift and go to state 78
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 104
    Primary                        shift and go to state 105
    NewObject                      shift and go to state 88
    SE                             shift and go to state 107
    Inc                            shift and go to state 90

state 199

    (102) ArrayAccess -> Primary LSQR AE RSQR .

    DOT             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    LSQR            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    TIMES           reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    SLASH           reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    PLUS            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    MINUS           reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    LT              reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    EQ              reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    GT              reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    GTEQ            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    LTEQ            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    NEQ             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    LAND            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    LOR             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    MOD             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    SEMICOLON       reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    EQUALS          reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    INC             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    DEC             reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    DO              reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    RPAREN          reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    THEN            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    COMMA           reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)
    RSQR            reduce using rule 102 (ArrayAccess -> Primary LSQR AE RSQR .)


state 200

    (113) DimExpr -> LSQR AE . RSQR
    (68) AE -> AE . TIMES AE
    (69) AE -> AE . SLASH AE
    (70) AE -> AE . PLUS AE
    (71) AE -> AE . MINUS AE
    (72) AE -> AE . LT AE
    (73) AE -> AE . EQ AE
    (74) AE -> AE . GT AE
    (75) AE -> AE . GTEQ AE
    (76) AE -> AE . LTEQ AE
    (77) AE -> AE . NEQ AE
    (78) AE -> AE . LAND AE
    (79) AE -> AE . LOR AE
    (80) AE -> AE . MOD AE

    RSQR            shift and go to state 207
    TIMES           shift and go to state 140
    SLASH           shift and go to state 145
    PLUS            shift and go to state 144
    MINUS           shift and go to state 148
    LT              shift and go to state 142
    EQ              shift and go to state 147
    GT              shift and go to state 137
    GTEQ            shift and go to state 138
    LTEQ            shift and go to state 139
    NEQ             shift and go to state 149
    LAND            shift and go to state 143
    LOR             shift and go to state 141
    MOD             shift and go to state 146


state 201

    (112) NewArray -> NEW Type DimExpr Dimstar .

    TIMES           reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    SLASH           reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    PLUS            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    MINUS           reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    LT              reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    EQ              reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    GT              reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    GTEQ            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    LTEQ            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    NEQ             reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    LAND            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    LOR             reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    MOD             reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    SEMICOLON       reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    DO              reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    RPAREN          reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    THEN            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    COMMA           reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)
    RSQR            reduce using rule 112 (NewArray -> NEW Type DimExpr Dimstar .)


state 202

    (59) Do_while -> DO Stmt WHILE AE SEMICOLON .

    CLASS           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    INT             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    BOOL            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    VOID            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    animal          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    dog             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    $end            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    RCURLY          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    WHILE           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    PRINT           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    LCURLY          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    IF              reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    FOR             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    DO              reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    RETURN          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    INC             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    DEC             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    IDENTIFIER      reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    LPAREN          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    NUMBER          reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    TRUE            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    FALSE           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    THIS            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    SUPER           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    INPUT           reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    NEW             reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)
    ELSE            reduce using rule 59 (Do_while -> DO Stmt WHILE AE SEMICOLON .)


state 203

    (54) Print -> PRINT LPAREN AE RPAREN SEMICOLON .

    CLASS           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    INT             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    BOOL            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    VOID            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    animal          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    dog             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    $end            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    RCURLY          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    WHILE           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    PRINT           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    LCURLY          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    IF              reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    FOR             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    DO              reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    RETURN          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    INC             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    DEC             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    LPAREN          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    NUMBER          reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    TRUE            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    FALSE           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    THIS            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    SUPER           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    INPUT           reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    NEW             reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)
    ELSE            reduce using rule 54 (Print -> PRINT LPAREN AE RPAREN SEMICOLON .)


state 204

    (60) for -> FOR LPAREN SEQ SEMICOLON AEQ . SEMICOLON SEQ RPAREN Stmt

    SEMICOLON       shift and go to state 208


state 205

    (57) If -> IF AE THEN Stmt ELSE . Stmt
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    super                          shift and go to state 66
    Stmt                           shift and go to state 209
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    for                            shift and go to state 65
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 206

    (108) Args -> AE COMMA Args .

    RPAREN          reduce using rule 108 (Args -> AE COMMA Args .)


state 207

    (113) DimExpr -> LSQR AE RSQR .

    LSQR            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    TIMES           reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    SLASH           reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    PLUS            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    MINUS           reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    LT              reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    EQ              reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    GT              reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    GTEQ            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    LTEQ            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    NEQ             reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    LAND            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    LOR             reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    MOD             reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    SEMICOLON       reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    DO              reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    RPAREN          reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    THEN            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    COMMA           reduce using rule 113 (DimExpr -> LSQR AE RSQR .)
    RSQR            reduce using rule 113 (DimExpr -> LSQR AE RSQR .)


state 208

    (60) for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON . SEQ RPAREN Stmt
    (61) SEQ -> . empty
    (62) SEQ -> . SE
    (4) empty -> .
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    RPAREN          reduce using rule 4 (empty -> .)
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Input                          shift and go to state 59
    MethodCall                     shift and go to state 63
    SEQ                            shift and go to state 210
    true                           shift and go to state 79
    empty                          shift and go to state 162
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    super                          shift and go to state 66
    Assign                         shift and go to state 80
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    SE                             shift and go to state 163
    Inc                            shift and go to state 90

state 209

    (57) If -> IF AE THEN Stmt ELSE Stmt .

    CLASS           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    INT             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    BOOL            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    VOID            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    animal          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    dog             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    $end            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    RCURLY          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    WHILE           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    PRINT           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    LCURLY          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    IF              reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    FOR             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    DO              reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    RETURN          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    INC             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    DEC             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    IDENTIFIER      reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    LPAREN          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    NUMBER          reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    TRUE            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    FALSE           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    THIS            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    SUPER           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    INPUT           reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    NEW             reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)
    ELSE            reduce using rule 57 (If -> IF AE THEN Stmt ELSE Stmt .)


state 210

    (60) for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ . RPAREN Stmt

    RPAREN          shift and go to state 211


state 211

    (60) for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN . Stmt
    (37) Stmt -> . SE SEMICOLON
    (38) Stmt -> . Print
    (39) Stmt -> . Block
    (40) Stmt -> . If
    (41) Stmt -> . While
    (42) Stmt -> . for
    (43) Stmt -> . Do_while
    (44) Stmt -> . Return
    (45) SE -> . Assign
    (46) SE -> . MethodCall
    (54) Print -> . PRINT LPAREN AE RPAREN SEMICOLON
    (55) Block -> . LCURLY VarDeclstar Stmtstar RCURLY
    (56) If -> . IF AE THEN Stmt
    (57) If -> . IF AE THEN Stmt ELSE Stmt
    (58) While -> . WHILE AE DO Stmt
    (60) for -> . FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt
    (59) Do_while -> . DO Stmt WHILE AE SEMICOLON
    (65) Return -> . RETURN AEQ SEMICOLON
    (47) Assign -> . Lhs EQUALS AE
    (48) Assign -> . Lhs Inc
    (49) Assign -> . Lhs Dec
    (50) Assign -> . Inc Lhs
    (51) Assign -> . Dec Lhs
    (105) MethodCall -> . FieldAccess LPAREN ArgsQ RPAREN
    (66) Lhs -> . FieldAccess
    (67) Lhs -> . ArrayAccess
    (53) Inc -> . INC
    (52) Dec -> . DEC
    (103) FieldAccess -> . Primary DOT IDENTIFIER
    (104) FieldAccess -> . IDENTIFIER
    (102) ArrayAccess -> . Primary LSQR AE RSQR
    (86) Primary -> . intconst
    (87) Primary -> . true
    (88) Primary -> . false
    (89) Primary -> . this
    (90) Primary -> . super
    (91) Primary -> . Input
    (92) Primary -> . LPAREN AE RPAREN
    (93) Primary -> . FieldAccess
    (94) Primary -> . ArrayAccess
    (95) Primary -> . NewObject
    (96) intconst -> . NUMBER
    (97) true -> . TRUE
    (98) false -> . FALSE
    (99) this -> . THIS
    (100) super -> . SUPER
    (101) Input -> . INPUT LPAREN RPAREN
    (110) NewObject -> . NEW animal LPAREN RPAREN
    (111) NewObject -> . NEW dog LPAREN RPAREN

    PRINT           shift and go to state 54
    LCURLY          shift and go to state 56
    IF              shift and go to state 82
    WHILE           shift and go to state 57
    FOR             shift and go to state 70
    DO              shift and go to state 53
    RETURN          shift and go to state 52
    INC             shift and go to state 68
    DEC             shift and go to state 62
    IDENTIFIER      shift and go to state 69
    LPAREN          shift and go to state 74
    NUMBER          shift and go to state 55
    TRUE            shift and go to state 89
    FALSE           shift and go to state 83
    THIS            shift and go to state 87
    SUPER           shift and go to state 91
    INPUT           shift and go to state 61
    NEW             shift and go to state 64

    false                          shift and go to state 71
    Do_while                       shift and go to state 58
    Input                          shift and go to state 59
    Print                          shift and go to state 60
    MethodCall                     shift and go to state 63
    Return                         shift and go to state 76
    for                            shift and go to state 65
    super                          shift and go to state 66
    Stmt                           shift and go to state 212
    While                          shift and go to state 72
    Lhs                            shift and go to state 73
    intconst                       shift and go to state 75
    ArrayAccess                    shift and go to state 77
    Dec                            shift and go to state 78
    true                           shift and go to state 79
    Assign                         shift and go to state 80
    Block                          shift and go to state 81
    this                           shift and go to state 84
    FieldAccess                    shift and go to state 85
    Primary                        shift and go to state 86
    NewObject                      shift and go to state 88
    If                             shift and go to state 93
    SE                             shift and go to state 92
    Inc                            shift and go to state 90

state 212

    (60) for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .

    CLASS           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    INT             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    BOOL            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    VOID            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    animal          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    dog             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    $end            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    RCURLY          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    WHILE           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    PRINT           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    LCURLY          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    IF              reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    FOR             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    DO              reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    RETURN          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    INC             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    DEC             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    IDENTIFIER      reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    LPAREN          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    NUMBER          reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    TRUE            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    FALSE           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    THIS            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    SUPER           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    INPUT           reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    NEW             reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)
    ELSE            reduce using rule 60 (for -> FOR LPAREN SEQ SEMICOLON AEQ SEMICOLON SEQ RPAREN Stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 196 resolved as shift
